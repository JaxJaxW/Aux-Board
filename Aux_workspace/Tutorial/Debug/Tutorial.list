
Tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d8  080020d8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080020d8  080020d8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020d8  080020d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d8  080020d8  000120d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020dc  080020dc  000120dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080020e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000004  080020e4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080020e4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7a7  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b78  00000000  00000000  0002c7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000658  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b69  00000000  00000000  0002f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f50  00000000  00000000  00045c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078cad  00000000  00000000  0004db81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c682e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e4  00000000  00000000  000c68ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002088 	.word	0x08002088

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002088 	.word	0x08002088

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fdbd 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ffc6 	bl	80011e0 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8c9 	bl	80003fa <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8ad 	bl	80003d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b7f      	cmp	r3, #127	; 0x7f
 80002c0:	d932      	bls.n	8000328 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c2:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	0019      	movs	r1, r3
 80002ca:	230f      	movs	r3, #15
 80002cc:	400b      	ands	r3, r1
 80002ce:	3b08      	subs	r3, #8
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	3306      	adds	r3, #6
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	18d3      	adds	r3, r2, r3
 80002d8:	3304      	adds	r3, #4
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	1dfa      	adds	r2, r7, #7
 80002de:	7812      	ldrb	r2, [r2, #0]
 80002e0:	0011      	movs	r1, r2
 80002e2:	2203      	movs	r2, #3
 80002e4:	400a      	ands	r2, r1
 80002e6:	00d2      	lsls	r2, r2, #3
 80002e8:	21ff      	movs	r1, #255	; 0xff
 80002ea:	4091      	lsls	r1, r2
 80002ec:	000a      	movs	r2, r1
 80002ee:	43d2      	mvns	r2, r2
 80002f0:	401a      	ands	r2, r3
 80002f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	019b      	lsls	r3, r3, #6
 80002f8:	22ff      	movs	r2, #255	; 0xff
 80002fa:	401a      	ands	r2, r3
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	0018      	movs	r0, r3
 8000302:	2303      	movs	r3, #3
 8000304:	4003      	ands	r3, r0
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	481d      	ldr	r0, [pc, #116]	; (8000380 <NVIC_SetPriority+0xd4>)
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	001c      	movs	r4, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4023      	ands	r3, r4
 8000316:	3b08      	subs	r3, #8
 8000318:	089b      	lsrs	r3, r3, #2
 800031a:	430a      	orrs	r2, r1
 800031c:	3306      	adds	r3, #6
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	18c3      	adds	r3, r0, r3
 8000322:	3304      	adds	r3, #4
 8000324:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e027      	b.n	8000378 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4a16      	ldr	r2, [pc, #88]	; (8000384 <NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b25b      	sxtb	r3, r3
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	33c0      	adds	r3, #192	; 0xc0
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	589b      	ldr	r3, [r3, r2]
 8000338:	1dfa      	adds	r2, r7, #7
 800033a:	7812      	ldrb	r2, [r2, #0]
 800033c:	0011      	movs	r1, r2
 800033e:	2203      	movs	r2, #3
 8000340:	400a      	ands	r2, r1
 8000342:	00d2      	lsls	r2, r2, #3
 8000344:	21ff      	movs	r1, #255	; 0xff
 8000346:	4091      	lsls	r1, r2
 8000348:	000a      	movs	r2, r1
 800034a:	43d2      	mvns	r2, r2
 800034c:	401a      	ands	r2, r3
 800034e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	019b      	lsls	r3, r3, #6
 8000354:	22ff      	movs	r2, #255	; 0xff
 8000356:	401a      	ands	r2, r3
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	0018      	movs	r0, r3
 800035e:	2303      	movs	r3, #3
 8000360:	4003      	ands	r3, r0
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000366:	4807      	ldr	r0, [pc, #28]	; (8000384 <NVIC_SetPriority+0xd8>)
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b25b      	sxtb	r3, r3
 800036e:	089b      	lsrs	r3, r3, #2
 8000370:	430a      	orrs	r2, r1
 8000372:	33c0      	adds	r3, #192	; 0xc0
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	501a      	str	r2, [r3, r0]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b003      	add	sp, #12
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	e000e100 	.word	0xe000e100

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <SysTick_Config+0x40>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d901      	bls.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e010      	b.n	80003c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <SysTick_Config+0x44>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	3a01      	subs	r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	2301      	movs	r3, #1
 80003a8:	425b      	negs	r3, r3
 80003aa:	2103      	movs	r1, #3
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff7d 	bl	80002ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SysTick_Config+0x44>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <SysTick_Config+0x44>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003be:	2300      	movs	r3, #0
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	00ffffff 	.word	0x00ffffff
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	210f      	movs	r1, #15
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	1c02      	adds	r2, r0, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f7ff ff5d 	bl	80002ac <NVIC_SetPriority>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b004      	add	sp, #16
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	0018      	movs	r0, r3
 8000406:	f7ff ffbf 	bl	8000388 <SysTick_Config>
 800040a:	0003      	movs	r3, r0
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}

08000414 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d101      	bne.n	8000426 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000422:	2301      	movs	r3, #1
 8000424:	e015      	b.n	8000452 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b00      	cmp	r3, #0
 800042e:	d106      	bne.n	800043e <HAL_DAC_Init+0x2a>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fcdf 	bl	8001dfc <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2202      	movs	r2, #2
 8000442:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2201      	movs	r2, #1
 800044e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000450:	2300      	movs	r3, #0
}
 8000452:	0018      	movs	r0, r3
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d101      	bne.n	800047c <HAL_DAC_ConfigChannel+0x20>
 8000478:	2302      	movs	r3, #2
 800047a:	e029      	b.n	80004d0 <HAL_DAC_ConfigChannel+0x74>
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2201      	movs	r2, #1
 8000480:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2202      	movs	r2, #2
 8000486:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <HAL_DAC_ConfigChannel+0x7c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	409a      	lsls	r2, r3
 8000496:	0013      	movs	r3, r2
 8000498:	43da      	mvns	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	4013      	ands	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	409a      	lsls	r2, r3
 80004b2:	0013      	movs	r3, r2
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2200      	movs	r2, #0
 80004cc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b006      	add	sp, #24
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	00000ffe 	.word	0x00000ffe

080004dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004f2:	e155      	b.n	80007a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2101      	movs	r1, #1
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	4091      	lsls	r1, r2
 80004fe:	000a      	movs	r2, r1
 8000500:	4013      	ands	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d100      	bne.n	800050c <HAL_GPIO_Init+0x30>
 800050a:	e146      	b.n	800079a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d003      	beq.n	800051c <HAL_GPIO_Init+0x40>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b12      	cmp	r3, #18
 800051a:	d123      	bne.n	8000564 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	08da      	lsrs	r2, r3, #3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3208      	adds	r2, #8
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	58d3      	ldr	r3, [r2, r3]
 8000528:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2207      	movs	r2, #7
 800052e:	4013      	ands	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	220f      	movs	r2, #15
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	691a      	ldr	r2, [r3, #16]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	2107      	movs	r1, #7
 8000548:	400b      	ands	r3, r1
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	08da      	lsrs	r2, r3, #3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3208      	adds	r2, #8
 800055e:	0092      	lsls	r2, r2, #2
 8000560:	6939      	ldr	r1, [r7, #16]
 8000562:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2203      	movs	r2, #3
 8000570:	409a      	lsls	r2, r3
 8000572:	0013      	movs	r3, r2
 8000574:	43da      	mvns	r2, r3
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2203      	movs	r2, #3
 8000582:	401a      	ands	r2, r3
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	4313      	orrs	r3, r2
 8000590:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00b      	beq.n	80005b8 <HAL_GPIO_Init+0xdc>
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d007      	beq.n	80005b8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005ac:	2b11      	cmp	r3, #17
 80005ae:	d003      	beq.n	80005b8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2b12      	cmp	r3, #18
 80005b6:	d130      	bne.n	800061a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	2203      	movs	r2, #3
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0013      	movs	r3, r2
 80005c8:	43da      	mvns	r2, r3
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	4013      	ands	r3, r2
 80005ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	68da      	ldr	r2, [r3, #12]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	409a      	lsls	r2, r3
 80005da:	0013      	movs	r3, r2
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	4313      	orrs	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005ee:	2201      	movs	r2, #1
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	409a      	lsls	r2, r3
 80005f4:	0013      	movs	r3, r2
 80005f6:	43da      	mvns	r2, r3
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	4013      	ands	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	091b      	lsrs	r3, r3, #4
 8000604:	2201      	movs	r2, #1
 8000606:	401a      	ands	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	409a      	lsls	r2, r3
 800060c:	0013      	movs	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	4313      	orrs	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	2203      	movs	r2, #3
 8000626:	409a      	lsls	r2, r3
 8000628:	0013      	movs	r3, r2
 800062a:	43da      	mvns	r2, r3
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	4013      	ands	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	409a      	lsls	r2, r3
 800063c:	0013      	movs	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	4313      	orrs	r3, r2
 8000642:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	055b      	lsls	r3, r3, #21
 8000652:	4013      	ands	r3, r2
 8000654:	d100      	bne.n	8000658 <HAL_GPIO_Init+0x17c>
 8000656:	e0a0      	b.n	800079a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000658:	4b57      	ldr	r3, [pc, #348]	; (80007b8 <HAL_GPIO_Init+0x2dc>)
 800065a:	699a      	ldr	r2, [r3, #24]
 800065c:	4b56      	ldr	r3, [pc, #344]	; (80007b8 <HAL_GPIO_Init+0x2dc>)
 800065e:	2101      	movs	r1, #1
 8000660:	430a      	orrs	r2, r1
 8000662:	619a      	str	r2, [r3, #24]
 8000664:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <HAL_GPIO_Init+0x2dc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	2201      	movs	r2, #1
 800066a:	4013      	ands	r3, r2
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000670:	4a52      	ldr	r2, [pc, #328]	; (80007bc <HAL_GPIO_Init+0x2e0>)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	3302      	adds	r3, #2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	589b      	ldr	r3, [r3, r2]
 800067c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2203      	movs	r2, #3
 8000682:	4013      	ands	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	220f      	movs	r2, #15
 8000688:	409a      	lsls	r2, r3
 800068a:	0013      	movs	r3, r2
 800068c:	43da      	mvns	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	429a      	cmp	r2, r3
 800069c:	d019      	beq.n	80006d2 <HAL_GPIO_Init+0x1f6>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a47      	ldr	r2, [pc, #284]	; (80007c0 <HAL_GPIO_Init+0x2e4>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d013      	beq.n	80006ce <HAL_GPIO_Init+0x1f2>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a46      	ldr	r2, [pc, #280]	; (80007c4 <HAL_GPIO_Init+0x2e8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00d      	beq.n	80006ca <HAL_GPIO_Init+0x1ee>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a45      	ldr	r2, [pc, #276]	; (80007c8 <HAL_GPIO_Init+0x2ec>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d007      	beq.n	80006c6 <HAL_GPIO_Init+0x1ea>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a44      	ldr	r2, [pc, #272]	; (80007cc <HAL_GPIO_Init+0x2f0>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d101      	bne.n	80006c2 <HAL_GPIO_Init+0x1e6>
 80006be:	2304      	movs	r3, #4
 80006c0:	e008      	b.n	80006d4 <HAL_GPIO_Init+0x1f8>
 80006c2:	2305      	movs	r3, #5
 80006c4:	e006      	b.n	80006d4 <HAL_GPIO_Init+0x1f8>
 80006c6:	2303      	movs	r3, #3
 80006c8:	e004      	b.n	80006d4 <HAL_GPIO_Init+0x1f8>
 80006ca:	2302      	movs	r3, #2
 80006cc:	e002      	b.n	80006d4 <HAL_GPIO_Init+0x1f8>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <HAL_GPIO_Init+0x1f8>
 80006d2:	2300      	movs	r3, #0
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	2103      	movs	r1, #3
 80006d8:	400a      	ands	r2, r1
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	4093      	lsls	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006e4:	4935      	ldr	r1, [pc, #212]	; (80007bc <HAL_GPIO_Init+0x2e0>)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	089b      	lsrs	r3, r3, #2
 80006ea:	3302      	adds	r3, #2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	43da      	mvns	r2, r3
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	4013      	ands	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	4013      	ands	r3, r2
 800070c:	d003      	beq.n	8000716 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	43da      	mvns	r2, r3
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	029b      	lsls	r3, r3, #10
 8000734:	4013      	ands	r3, r2
 8000736:	d003      	beq.n	8000740 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	43da      	mvns	r2, r3
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	4013      	ands	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	035b      	lsls	r3, r3, #13
 800075e:	4013      	ands	r3, r2
 8000760:	d003      	beq.n	800076a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4313      	orrs	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	43da      	mvns	r2, r3
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	039b      	lsls	r3, r3, #14
 8000788:	4013      	ands	r3, r2
 800078a:	d003      	beq.n	8000794 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	1e13      	subs	r3, r2, #0
 80007aa:	d000      	beq.n	80007ae <HAL_GPIO_Init+0x2d2>
 80007ac:	e6a2      	b.n	80004f4 <HAL_GPIO_Init+0x18>
  } 
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b006      	add	sp, #24
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010000 	.word	0x40010000
 80007c0:	48000400 	.word	0x48000400
 80007c4:	48000800 	.word	0x48000800
 80007c8:	48000c00 	.word	0x48000c00
 80007cc:	48001000 	.word	0x48001000
 80007d0:	40010400 	.word	0x40010400

080007d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	0008      	movs	r0, r1
 80007de:	0011      	movs	r1, r2
 80007e0:	1cbb      	adds	r3, r7, #2
 80007e2:	1c02      	adds	r2, r0, #0
 80007e4:	801a      	strh	r2, [r3, #0]
 80007e6:	1c7b      	adds	r3, r7, #1
 80007e8:	1c0a      	adds	r2, r1, #0
 80007ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007ec:	1c7b      	adds	r3, r7, #1
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007f4:	1cbb      	adds	r3, r7, #2
 80007f6:	881a      	ldrh	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007fc:	e003      	b.n	8000806 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007fe:	1cbb      	adds	r3, r7, #2
 8000800:	881a      	ldrh	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2201      	movs	r2, #1
 8000822:	4013      	ands	r3, r2
 8000824:	d100      	bne.n	8000828 <HAL_RCC_OscConfig+0x18>
 8000826:	e08d      	b.n	8000944 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000828:	4bc5      	ldr	r3, [pc, #788]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	220c      	movs	r2, #12
 800082e:	4013      	ands	r3, r2
 8000830:	2b04      	cmp	r3, #4
 8000832:	d00e      	beq.n	8000852 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000834:	4bc2      	ldr	r3, [pc, #776]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	220c      	movs	r2, #12
 800083a:	4013      	ands	r3, r2
 800083c:	2b08      	cmp	r3, #8
 800083e:	d116      	bne.n	800086e <HAL_RCC_OscConfig+0x5e>
 8000840:	4bbf      	ldr	r3, [pc, #764]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	23c0      	movs	r3, #192	; 0xc0
 8000846:	025b      	lsls	r3, r3, #9
 8000848:	401a      	ands	r2, r3
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	025b      	lsls	r3, r3, #9
 800084e:	429a      	cmp	r2, r3
 8000850:	d10d      	bne.n	800086e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000852:	4bbb      	ldr	r3, [pc, #748]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	029b      	lsls	r3, r3, #10
 800085a:	4013      	ands	r3, r2
 800085c:	d100      	bne.n	8000860 <HAL_RCC_OscConfig+0x50>
 800085e:	e070      	b.n	8000942 <HAL_RCC_OscConfig+0x132>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d000      	beq.n	800086a <HAL_RCC_OscConfig+0x5a>
 8000868:	e06b      	b.n	8000942 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e329      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d107      	bne.n	8000886 <HAL_RCC_OscConfig+0x76>
 8000876:	4bb2      	ldr	r3, [pc, #712]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4bb1      	ldr	r3, [pc, #708]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0249      	lsls	r1, r1, #9
 8000880:	430a      	orrs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e02f      	b.n	80008e6 <HAL_RCC_OscConfig+0xd6>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10c      	bne.n	80008a8 <HAL_RCC_OscConfig+0x98>
 800088e:	4bac      	ldr	r3, [pc, #688]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4bab      	ldr	r3, [pc, #684]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000894:	49ab      	ldr	r1, [pc, #684]	; (8000b44 <HAL_RCC_OscConfig+0x334>)
 8000896:	400a      	ands	r2, r1
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4ba9      	ldr	r3, [pc, #676]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4ba8      	ldr	r3, [pc, #672]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008a0:	49a9      	ldr	r1, [pc, #676]	; (8000b48 <HAL_RCC_OscConfig+0x338>)
 80008a2:	400a      	ands	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e01e      	b.n	80008e6 <HAL_RCC_OscConfig+0xd6>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d10e      	bne.n	80008ce <HAL_RCC_OscConfig+0xbe>
 80008b0:	4ba3      	ldr	r3, [pc, #652]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4ba2      	ldr	r3, [pc, #648]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	02c9      	lsls	r1, r1, #11
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	4ba0      	ldr	r3, [pc, #640]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b9f      	ldr	r3, [pc, #636]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0249      	lsls	r1, r1, #9
 80008c8:	430a      	orrs	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e00b      	b.n	80008e6 <HAL_RCC_OscConfig+0xd6>
 80008ce:	4b9c      	ldr	r3, [pc, #624]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4b9b      	ldr	r3, [pc, #620]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008d4:	499b      	ldr	r1, [pc, #620]	; (8000b44 <HAL_RCC_OscConfig+0x334>)
 80008d6:	400a      	ands	r2, r1
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	4b99      	ldr	r3, [pc, #612]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b98      	ldr	r3, [pc, #608]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80008e0:	4999      	ldr	r1, [pc, #612]	; (8000b48 <HAL_RCC_OscConfig+0x338>)
 80008e2:	400a      	ands	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d014      	beq.n	8000918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ee:	f7ff fcd3 	bl	8000298 <HAL_GetTick>
 80008f2:	0003      	movs	r3, r0
 80008f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f6:	e008      	b.n	800090a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f8:	f7ff fcce 	bl	8000298 <HAL_GetTick>
 80008fc:	0002      	movs	r2, r0
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b64      	cmp	r3, #100	; 0x64
 8000904:	d901      	bls.n	800090a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000906:	2303      	movs	r3, #3
 8000908:	e2db      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090a:	4b8d      	ldr	r3, [pc, #564]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	029b      	lsls	r3, r3, #10
 8000912:	4013      	ands	r3, r2
 8000914:	d0f0      	beq.n	80008f8 <HAL_RCC_OscConfig+0xe8>
 8000916:	e015      	b.n	8000944 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000918:	f7ff fcbe 	bl	8000298 <HAL_GetTick>
 800091c:	0003      	movs	r3, r0
 800091e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000920:	e008      	b.n	8000934 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000922:	f7ff fcb9 	bl	8000298 <HAL_GetTick>
 8000926:	0002      	movs	r2, r0
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	2b64      	cmp	r3, #100	; 0x64
 800092e:	d901      	bls.n	8000934 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000930:	2303      	movs	r3, #3
 8000932:	e2c6      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000934:	4b82      	ldr	r3, [pc, #520]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	d1f0      	bne.n	8000922 <HAL_RCC_OscConfig+0x112>
 8000940:	e000      	b.n	8000944 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000942:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2202      	movs	r2, #2
 800094a:	4013      	ands	r3, r2
 800094c:	d100      	bne.n	8000950 <HAL_RCC_OscConfig+0x140>
 800094e:	e06c      	b.n	8000a2a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000950:	4b7b      	ldr	r3, [pc, #492]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	220c      	movs	r2, #12
 8000956:	4013      	ands	r3, r2
 8000958:	d00e      	beq.n	8000978 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800095a:	4b79      	ldr	r3, [pc, #484]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	220c      	movs	r2, #12
 8000960:	4013      	ands	r3, r2
 8000962:	2b08      	cmp	r3, #8
 8000964:	d11f      	bne.n	80009a6 <HAL_RCC_OscConfig+0x196>
 8000966:	4b76      	ldr	r3, [pc, #472]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	23c0      	movs	r3, #192	; 0xc0
 800096c:	025b      	lsls	r3, r3, #9
 800096e:	401a      	ands	r2, r3
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	429a      	cmp	r2, r3
 8000976:	d116      	bne.n	80009a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000978:	4b71      	ldr	r3, [pc, #452]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2202      	movs	r2, #2
 800097e:	4013      	ands	r3, r2
 8000980:	d005      	beq.n	800098e <HAL_RCC_OscConfig+0x17e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d001      	beq.n	800098e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e299      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098e:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	22f8      	movs	r2, #248	; 0xf8
 8000994:	4393      	bics	r3, r2
 8000996:	0019      	movs	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	00da      	lsls	r2, r3, #3
 800099e:	4b68      	ldr	r3, [pc, #416]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009a0:	430a      	orrs	r2, r1
 80009a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a4:	e041      	b.n	8000a2a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d024      	beq.n	80009f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ae:	4b64      	ldr	r3, [pc, #400]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b63      	ldr	r3, [pc, #396]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009b4:	2101      	movs	r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ba:	f7ff fc6d 	bl	8000298 <HAL_GetTick>
 80009be:	0003      	movs	r3, r0
 80009c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c2:	e008      	b.n	80009d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c4:	f7ff fc68 	bl	8000298 <HAL_GetTick>
 80009c8:	0002      	movs	r2, r0
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d901      	bls.n	80009d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e275      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d6:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2202      	movs	r2, #2
 80009dc:	4013      	ands	r3, r2
 80009de:	d0f1      	beq.n	80009c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e0:	4b57      	ldr	r3, [pc, #348]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	22f8      	movs	r2, #248	; 0xf8
 80009e6:	4393      	bics	r3, r2
 80009e8:	0019      	movs	r1, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	00da      	lsls	r2, r3, #3
 80009f0:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009f2:	430a      	orrs	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e018      	b.n	8000a2a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f8:	4b51      	ldr	r3, [pc, #324]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b50      	ldr	r3, [pc, #320]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	438a      	bics	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a04:	f7ff fc48 	bl	8000298 <HAL_GetTick>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0c:	e008      	b.n	8000a20 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0e:	f7ff fc43 	bl	8000298 <HAL_GetTick>
 8000a12:	0002      	movs	r2, r0
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d901      	bls.n	8000a20 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e250      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a20:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2202      	movs	r2, #2
 8000a26:	4013      	ands	r3, r2
 8000a28:	d1f1      	bne.n	8000a0e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2208      	movs	r2, #8
 8000a30:	4013      	ands	r3, r2
 8000a32:	d036      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d019      	beq.n	8000a70 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a3c:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a48:	f7ff fc26 	bl	8000298 <HAL_GetTick>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a50:	e008      	b.n	8000a64 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a52:	f7ff fc21 	bl	8000298 <HAL_GetTick>
 8000a56:	0002      	movs	r2, r0
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d901      	bls.n	8000a64 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000a60:	2303      	movs	r3, #3
 8000a62:	e22e      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d0f1      	beq.n	8000a52 <HAL_RCC_OscConfig+0x242>
 8000a6e:	e018      	b.n	8000aa2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a70:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a76:	2101      	movs	r1, #1
 8000a78:	438a      	bics	r2, r1
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a7c:	f7ff fc0c 	bl	8000298 <HAL_GetTick>
 8000a80:	0003      	movs	r3, r0
 8000a82:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a84:	e008      	b.n	8000a98 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a86:	f7ff fc07 	bl	8000298 <HAL_GetTick>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d901      	bls.n	8000a98 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a94:	2303      	movs	r3, #3
 8000a96:	e214      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	d1f1      	bne.n	8000a86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d100      	bne.n	8000aae <HAL_RCC_OscConfig+0x29e>
 8000aac:	e0b6      	b.n	8000c1c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aae:	2317      	movs	r3, #23
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000ab8:	69da      	ldr	r2, [r3, #28]
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	055b      	lsls	r3, r3, #21
 8000abe:	4013      	ands	r3, r2
 8000ac0:	d111      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000ac4:	69da      	ldr	r2, [r3, #28]
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0549      	lsls	r1, r1, #21
 8000acc:	430a      	orrs	r2, r1
 8000ace:	61da      	str	r2, [r3, #28]
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000ad2:	69da      	ldr	r2, [r3, #28]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	055b      	lsls	r3, r3, #21
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ade:	2317      	movs	r3, #23
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_RCC_OscConfig+0x33c>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	d11a      	bne.n	8000b28 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_RCC_OscConfig+0x33c>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_RCC_OscConfig+0x33c>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0049      	lsls	r1, r1, #1
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b00:	f7ff fbca 	bl	8000298 <HAL_GetTick>
 8000b04:	0003      	movs	r3, r0
 8000b06:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b08:	e008      	b.n	8000b1c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b0a:	f7ff fbc5 	bl	8000298 <HAL_GetTick>
 8000b0e:	0002      	movs	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2b64      	cmp	r3, #100	; 0x64
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e1d2      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_RCC_OscConfig+0x33c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4013      	ands	r3, r2
 8000b26:	d0f0      	beq.n	8000b0a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d10f      	bne.n	8000b50 <HAL_RCC_OscConfig+0x340>
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000b32:	6a1a      	ldr	r2, [r3, #32]
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	621a      	str	r2, [r3, #32]
 8000b3c:	e036      	b.n	8000bac <HAL_RCC_OscConfig+0x39c>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000
 8000b44:	fffeffff 	.word	0xfffeffff
 8000b48:	fffbffff 	.word	0xfffbffff
 8000b4c:	40007000 	.word	0x40007000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10c      	bne.n	8000b72 <HAL_RCC_OscConfig+0x362>
 8000b58:	4bca      	ldr	r3, [pc, #808]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b5a:	6a1a      	ldr	r2, [r3, #32]
 8000b5c:	4bc9      	ldr	r3, [pc, #804]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	438a      	bics	r2, r1
 8000b62:	621a      	str	r2, [r3, #32]
 8000b64:	4bc7      	ldr	r3, [pc, #796]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b66:	6a1a      	ldr	r2, [r3, #32]
 8000b68:	4bc6      	ldr	r3, [pc, #792]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	438a      	bics	r2, r1
 8000b6e:	621a      	str	r2, [r3, #32]
 8000b70:	e01c      	b.n	8000bac <HAL_RCC_OscConfig+0x39c>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d10c      	bne.n	8000b94 <HAL_RCC_OscConfig+0x384>
 8000b7a:	4bc2      	ldr	r3, [pc, #776]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b7c:	6a1a      	ldr	r2, [r3, #32]
 8000b7e:	4bc1      	ldr	r3, [pc, #772]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b80:	2104      	movs	r1, #4
 8000b82:	430a      	orrs	r2, r1
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	4bbf      	ldr	r3, [pc, #764]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b88:	6a1a      	ldr	r2, [r3, #32]
 8000b8a:	4bbe      	ldr	r3, [pc, #760]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	621a      	str	r2, [r3, #32]
 8000b92:	e00b      	b.n	8000bac <HAL_RCC_OscConfig+0x39c>
 8000b94:	4bbb      	ldr	r3, [pc, #748]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	4bba      	ldr	r3, [pc, #744]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	621a      	str	r2, [r3, #32]
 8000ba0:	4bb8      	ldr	r3, [pc, #736]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000ba2:	6a1a      	ldr	r2, [r3, #32]
 8000ba4:	4bb7      	ldr	r3, [pc, #732]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	438a      	bics	r2, r1
 8000baa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d014      	beq.n	8000bde <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb4:	f7ff fb70 	bl	8000298 <HAL_GetTick>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bbc:	e009      	b.n	8000bd2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fb6b 	bl	8000298 <HAL_GetTick>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	4aaf      	ldr	r2, [pc, #700]	; (8000e88 <HAL_RCC_OscConfig+0x678>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d901      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e177      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bd2:	4bac      	ldr	r3, [pc, #688]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d0f0      	beq.n	8000bbe <HAL_RCC_OscConfig+0x3ae>
 8000bdc:	e013      	b.n	8000c06 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fb5b 	bl	8000298 <HAL_GetTick>
 8000be2:	0003      	movs	r3, r0
 8000be4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be6:	e009      	b.n	8000bfc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be8:	f7ff fb56 	bl	8000298 <HAL_GetTick>
 8000bec:	0002      	movs	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	4aa5      	ldr	r2, [pc, #660]	; (8000e88 <HAL_RCC_OscConfig+0x678>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d901      	bls.n	8000bfc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e162      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bfc:	4ba1      	ldr	r3, [pc, #644]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	2202      	movs	r2, #2
 8000c02:	4013      	ands	r3, r2
 8000c04:	d1f0      	bne.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c06:	2317      	movs	r3, #23
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d105      	bne.n	8000c1c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c10:	4b9c      	ldr	r3, [pc, #624]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c12:	69da      	ldr	r2, [r3, #28]
 8000c14:	4b9b      	ldr	r3, [pc, #620]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c16:	499d      	ldr	r1, [pc, #628]	; (8000e8c <HAL_RCC_OscConfig+0x67c>)
 8000c18:	400a      	ands	r2, r1
 8000c1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2210      	movs	r2, #16
 8000c22:	4013      	ands	r3, r2
 8000c24:	d063      	beq.n	8000cee <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d12a      	bne.n	8000c84 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c2e:	4b95      	ldr	r3, [pc, #596]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c32:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c34:	2104      	movs	r1, #4
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c3a:	4b92      	ldr	r3, [pc, #584]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3e:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c46:	f7ff fb27 	bl	8000298 <HAL_GetTick>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c50:	f7ff fb22 	bl	8000298 <HAL_GetTick>
 8000c54:	0002      	movs	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e12f      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c62:	4b88      	ldr	r3, [pc, #544]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c66:	2202      	movs	r2, #2
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d0f1      	beq.n	8000c50 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c6c:	4b85      	ldr	r3, [pc, #532]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c70:	22f8      	movs	r2, #248	; 0xf8
 8000c72:	4393      	bics	r3, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	00da      	lsls	r2, r3, #3
 8000c7c:	4b81      	ldr	r3, [pc, #516]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
 8000c82:	e034      	b.n	8000cee <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	3305      	adds	r3, #5
 8000c8a:	d111      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c8c:	4b7d      	ldr	r3, [pc, #500]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c90:	4b7c      	ldr	r3, [pc, #496]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c92:	2104      	movs	r1, #4
 8000c94:	438a      	bics	r2, r1
 8000c96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c98:	4b7a      	ldr	r3, [pc, #488]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9c:	22f8      	movs	r2, #248	; 0xf8
 8000c9e:	4393      	bics	r3, r2
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	00da      	lsls	r2, r3, #3
 8000ca8:	4b76      	ldr	r3, [pc, #472]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000caa:	430a      	orrs	r2, r1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
 8000cae:	e01e      	b.n	8000cee <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cb0:	4b74      	ldr	r3, [pc, #464]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb4:	4b73      	ldr	r3, [pc, #460]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000cbc:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc0:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	438a      	bics	r2, r1
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fae6 	bl	8000298 <HAL_GetTick>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cd2:	f7ff fae1 	bl	8000298 <HAL_GetTick>
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e0ee      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ce4:	4b67      	ldr	r3, [pc, #412]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1f1      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d05c      	beq.n	8000db2 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000cf8:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b0c      	cmp	r3, #12
 8000d02:	d00e      	beq.n	8000d22 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000d04:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	220c      	movs	r2, #12
 8000d0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d114      	bne.n	8000d3a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000d10:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	401a      	ands	r2, r3
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10b      	bne.n	8000d3a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000d22:	4b58      	ldr	r3, [pc, #352]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	025b      	lsls	r3, r3, #9
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d040      	beq.n	8000db0 <HAL_RCC_OscConfig+0x5a0>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d03c      	beq.n	8000db0 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0c3      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d01b      	beq.n	8000d7a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d46:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	0249      	lsls	r1, r1, #9
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d50:	f7ff faa2 	bl	8000298 <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d5a:	f7ff fa9d 	bl	8000298 <HAL_GetTick>
 8000d5e:	0002      	movs	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e0aa      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	025b      	lsls	r3, r3, #9
 8000d74:	4013      	ands	r3, r2
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x54a>
 8000d78:	e01b      	b.n	8000db2 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000d7a:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000d80:	4943      	ldr	r1, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x680>)
 8000d82:	400a      	ands	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d86:	f7ff fa87 	bl	8000298 <HAL_GetTick>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d90:	f7ff fa82 	bl	8000298 <HAL_GetTick>
 8000d94:	0002      	movs	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e08f      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	4013      	ands	r3, r2
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x580>
 8000dae:	e000      	b.n	8000db2 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000db0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d100      	bne.n	8000dbc <HAL_RCC_OscConfig+0x5ac>
 8000dba:	e081      	b.n	8000ec0 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d100      	bne.n	8000dca <HAL_RCC_OscConfig+0x5ba>
 8000dc8:	e078      	b.n	8000ebc <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d14c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000dd8:	492e      	ldr	r1, [pc, #184]	; (8000e94 <HAL_RCC_OscConfig+0x684>)
 8000dda:	400a      	ands	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fa5b 	bl	8000298 <HAL_GetTick>
 8000de2:	0003      	movs	r3, r0
 8000de4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de8:	f7ff fa56 	bl	8000298 <HAL_GetTick>
 8000dec:	0002      	movs	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e063      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	049b      	lsls	r3, r3, #18
 8000e02:	4013      	ands	r3, r2
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	4393      	bics	r3, r2
 8000e0e:	0019      	movs	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_RCC_OscConfig+0x688>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	0019      	movs	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e30:	430a      	orrs	r2, r1
 8000e32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	0449      	lsls	r1, r1, #17
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fa29 	bl	8000298 <HAL_GetTick>
 8000e46:	0003      	movs	r3, r0
 8000e48:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fa24 	bl	8000298 <HAL_GetTick>
 8000e50:	0002      	movs	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e031      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	049b      	lsls	r3, r3, #18
 8000e66:	4013      	ands	r3, r2
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0x63c>
 8000e6a:	e029      	b.n	8000ec0 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_RCC_OscConfig+0x674>)
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <HAL_RCC_OscConfig+0x684>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fa0e 	bl	8000298 <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e80:	e015      	b.n	8000eae <HAL_RCC_OscConfig+0x69e>
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40021000 	.word	0x40021000
 8000e88:	00001388 	.word	0x00001388
 8000e8c:	efffffff 	.word	0xefffffff
 8000e90:	fffeffff 	.word	0xfffeffff
 8000e94:	feffffff 	.word	0xfeffffff
 8000e98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9c:	f7ff f9fc 	bl	8000298 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e009      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_RCC_OscConfig+0x6bc>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	049b      	lsls	r3, r3, #18
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x68c>
 8000eba:	e001      	b.n	8000ec0 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b006      	add	sp, #24
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ede:	4b7b      	ldr	r3, [pc, #492]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d911      	bls.n	8000f10 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eec:	4b77      	ldr	r3, [pc, #476]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4393      	bics	r3, r2
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	4b75      	ldr	r3, [pc, #468]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d001      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e0d8      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2202      	movs	r2, #2
 8000f16:	4013      	ands	r3, r2
 8000f18:	d009      	beq.n	8000f2e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	22f0      	movs	r2, #240	; 0xf0
 8000f20:	4393      	bics	r3, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	d100      	bne.n	8000f3a <HAL_RCC_ClockConfig+0x6a>
 8000f38:	e089      	b.n	800104e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d107      	bne.n	8000f52 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	029b      	lsls	r3, r3, #10
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d120      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0b7      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d107      	bne.n	8000f6a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	049b      	lsls	r3, r3, #18
 8000f62:	4013      	ands	r3, r2
 8000f64:	d114      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0ab      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d107      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d108      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e09f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f82:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2202      	movs	r2, #2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e098      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4393      	bics	r3, r2
 8000f98:	0019      	movs	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fa4:	f7ff f978 	bl	8000298 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d111      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb4:	e009      	b.n	8000fca <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb6:	f7ff f96f 	bl	8000298 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_RCC_ClockConfig+0x204>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e07b      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fca:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	220c      	movs	r2, #12
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d1ef      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xe6>
 8000fd6:	e03a      	b.n	800104e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d111      	bne.n	8001004 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe0:	e009      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe2:	f7ff f959 	bl	8000298 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4a39      	ldr	r2, [pc, #228]	; (80010d4 <HAL_RCC_ClockConfig+0x204>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e065      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff6:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d1ef      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0x112>
 8001002:	e024      	b.n	800104e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d11b      	bne.n	8001044 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800100c:	e009      	b.n	8001022 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100e:	f7ff f943 	bl	8000298 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <HAL_RCC_ClockConfig+0x204>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e04f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	220c      	movs	r2, #12
 8001028:	4013      	ands	r3, r2
 800102a:	2b0c      	cmp	r3, #12
 800102c:	d1ef      	bne.n	800100e <HAL_RCC_ClockConfig+0x13e>
 800102e:	e00e      	b.n	800104e <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001030:	f7ff f932 	bl	8000298 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_RCC_ClockConfig+0x204>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e03e      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	220c      	movs	r2, #12
 800104a:	4013      	ands	r3, r2
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d211      	bcs.n	8001080 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	4393      	bics	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_RCC_ClockConfig+0x1fc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e020      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2204      	movs	r2, #4
 8001086:	4013      	ands	r3, r2
 8001088:	d009      	beq.n	800109e <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_RCC_ClockConfig+0x208>)
 8001090:	4013      	ands	r3, r2
 8001092:	0019      	movs	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800109e:	f000 f821 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80010a2:	0001      	movs	r1, r0
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_RCC_ClockConfig+0x200>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	220f      	movs	r2, #15
 80010ac:	4013      	ands	r3, r2
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_RCC_ClockConfig+0x20c>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	000a      	movs	r2, r1
 80010b4:	40da      	lsrs	r2, r3
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_RCC_ClockConfig+0x210>)
 80010b8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff f8c4 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40022000 	.word	0x40022000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	00001388 	.word	0x00001388
 80010d8:	fffff8ff 	.word	0xfffff8ff
 80010dc:	080020c0 	.word	0x080020c0
 80010e0:	20000000 	.word	0x20000000

080010e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b08f      	sub	sp, #60	; 0x3c
 80010e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80010ea:	2314      	movs	r3, #20
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	4a37      	ldr	r2, [pc, #220]	; (80011cc <HAL_RCC_GetSysClockFreq+0xe8>)
 80010f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010f2:	c313      	stmia	r3!, {r0, r1, r4}
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4a35      	ldr	r2, [pc, #212]	; (80011d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80010fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	220c      	movs	r2, #12
 8001122:	4013      	ands	r3, r2
 8001124:	2b08      	cmp	r3, #8
 8001126:	d006      	beq.n	8001136 <HAL_RCC_GetSysClockFreq+0x52>
 8001128:	2b0c      	cmp	r3, #12
 800112a:	d043      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0xd0>
 800112c:	2b04      	cmp	r3, #4
 800112e:	d144      	bne.n	80011ba <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001134:	e044      	b.n	80011c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	0c9b      	lsrs	r3, r3, #18
 800113a:	220f      	movs	r2, #15
 800113c:	4013      	ands	r3, r2
 800113e:	2214      	movs	r2, #20
 8001140:	18ba      	adds	r2, r7, r2
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	220f      	movs	r2, #15
 800114c:	4013      	ands	r3, r2
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001156:	23c0      	movs	r3, #192	; 0xc0
 8001158:	025b      	lsls	r3, r3, #9
 800115a:	401a      	ands	r2, r3
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	025b      	lsls	r3, r3, #9
 8001160:	429a      	cmp	r2, r3
 8001162:	d109      	bne.n	8001178 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001166:	481c      	ldr	r0, [pc, #112]	; (80011d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001168:	f7fe ffce 	bl	8000108 <__udivsi3>
 800116c:	0003      	movs	r3, r0
 800116e:	001a      	movs	r2, r3
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	4353      	muls	r3, r2
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
 8001176:	e01a      	b.n	80011ae <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117a:	23c0      	movs	r3, #192	; 0xc0
 800117c:	025b      	lsls	r3, r3, #9
 800117e:	401a      	ands	r2, r3
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	025b      	lsls	r3, r3, #9
 8001184:	429a      	cmp	r2, r3
 8001186:	d109      	bne.n	800119c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800118c:	f7fe ffbc 	bl	8000108 <__udivsi3>
 8001190:	0003      	movs	r3, r0
 8001192:	001a      	movs	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	4353      	muls	r3, r2
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
 800119a:	e008      	b.n	80011ae <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800119c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80011a0:	f7fe ffb2 	bl	8000108 <__udivsi3>
 80011a4:	0003      	movs	r3, r0
 80011a6:	001a      	movs	r2, r3
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	4353      	muls	r3, r2
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80011ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011b2:	e005      	b.n	80011c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011b8:	e002      	b.n	80011c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80011c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b00f      	add	sp, #60	; 0x3c
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	080020a0 	.word	0x080020a0
 80011d0:	080020b0 	.word	0x080020b0
 80011d4:	40021000 	.word	0x40021000
 80011d8:	007a1200 	.word	0x007a1200
 80011dc:	02dc6c00 	.word	0x02dc6c00

080011e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80011f8:	f7ff fff2 	bl	80011e0 <HAL_RCC_GetHCLKFreq>
 80011fc:	0001      	movs	r1, r0
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	2207      	movs	r2, #7
 8001206:	4013      	ands	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_RCC_GetPCLK1Freq+0x28>)
 800120a:	5cd3      	ldrb	r3, [r2, r3]
 800120c:	40d9      	lsrs	r1, r3
 800120e:	000b      	movs	r3, r1
}    
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40021000 	.word	0x40021000
 800121c:	080020d0 	.word	0x080020d0

08001220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	025b      	lsls	r3, r3, #9
 8001238:	4013      	ands	r3, r2
 800123a:	d100      	bne.n	800123e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800123c:	e08f      	b.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2317      	movs	r3, #23
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001246:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001248:	69da      	ldr	r2, [r3, #28]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	055b      	lsls	r3, r3, #21
 800124e:	4013      	ands	r3, r2
 8001250:	d111      	bne.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	4b6b      	ldr	r3, [pc, #428]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0549      	lsls	r1, r1, #21
 800125c:	430a      	orrs	r2, r1
 800125e:	61da      	str	r2, [r3, #28]
 8001260:	4b68      	ldr	r3, [pc, #416]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001262:	69da      	ldr	r2, [r3, #28]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	055b      	lsls	r3, r3, #21
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126e:	2317      	movs	r3, #23
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4013      	ands	r3, r2
 8001280:	d11a      	bne.n	80012b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001282:	4b61      	ldr	r3, [pc, #388]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b60      	ldr	r3, [pc, #384]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0049      	lsls	r1, r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001290:	f7ff f802 	bl	8000298 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e008      	b.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129a:	f7fe fffd 	bl	8000298 <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d901      	bls.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0a6      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	4b56      	ldr	r3, [pc, #344]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4013      	ands	r3, r2
 80012b6:	d0f0      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	23c0      	movs	r3, #192	; 0xc0
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d034      	beq.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	23c0      	movs	r3, #192	; 0xc0
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d02c      	beq.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0249      	lsls	r1, r1, #9
 80012ee:	430a      	orrs	r2, r1
 80012f0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012f8:	4945      	ldr	r1, [pc, #276]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80012fe:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2201      	movs	r2, #1
 8001308:	4013      	ands	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7fe ffc4 	bl	8000298 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e009      	b.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7fe ffbf 	bl	8000298 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	4a3c      	ldr	r2, [pc, #240]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e067      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d0f0      	beq.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4a34      	ldr	r2, [pc, #208]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800133a:	4013      	ands	r3, r2
 800133c:	0019      	movs	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001344:	430a      	orrs	r2, r1
 8001346:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001348:	2317      	movs	r3, #23
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d105      	bne.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001358:	492f      	ldr	r1, [pc, #188]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800135a:	400a      	ands	r2, r1
 800135c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2201      	movs	r2, #1
 8001364:	4013      	ands	r3, r2
 8001366:	d009      	beq.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	2203      	movs	r2, #3
 800136e:	4393      	bics	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001378:	430a      	orrs	r2, r1
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2202      	movs	r2, #2
 8001382:	4013      	ands	r3, r2
 8001384:	d009      	beq.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a24      	ldr	r2, [pc, #144]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800138c:	4013      	ands	r3, r2
 800138e:	0019      	movs	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001396:	430a      	orrs	r2, r1
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2220      	movs	r2, #32
 80013a0:	4013      	ands	r3, r2
 80013a2:	d009      	beq.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	2210      	movs	r2, #16
 80013aa:	4393      	bics	r3, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d009      	beq.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	4393      	bics	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4013      	ands	r3, r2
 80013e2:	d009      	beq.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	4393      	bics	r3, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013f4:	430a      	orrs	r2, r1
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b006      	add	sp, #24
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40021000 	.word	0x40021000
 8001408:	40007000 	.word	0x40007000
 800140c:	fffffcff 	.word	0xfffffcff
 8001410:	fffeffff 	.word	0xfffeffff
 8001414:	00001388 	.word	0x00001388
 8001418:	efffffff 	.word	0xefffffff
 800141c:	fffcffff 	.word	0xfffcffff

08001420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e047      	b.n	80014c2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2269      	movs	r2, #105	; 0x69
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2268      	movs	r2, #104	; 0x68
 8001442:	2100      	movs	r1, #0
 8001444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f000 fd1d 	bl	8001e88 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2269      	movs	r2, #105	; 0x69
 8001452:	2124      	movs	r1, #36	; 0x24
 8001454:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	438a      	bics	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0018      	movs	r0, r3
 800146a:	f000 f831 	bl	80014d0 <UART_SetConfig>
 800146e:	0003      	movs	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e024      	b.n	80014c2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0018      	movs	r0, r3
 8001484:	f000 f9e0 	bl	8001848 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <HAL_UART_Init+0xac>)
 8001494:	400a      	ands	r2, r1
 8001496:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	212a      	movs	r1, #42	; 0x2a
 80014a4:	438a      	bics	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2101      	movs	r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fa78 	bl	80019b0 <UART_CheckIdleState>
 80014c0:	0003      	movs	r3, r0
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	ffffb7ff 	.word	0xffffb7ff

080014d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80014dc:	2317      	movs	r3, #23
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	2210      	movs	r2, #16
 80014e2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80014e4:	230a      	movs	r3, #10
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80014ec:	2314      	movs	r3, #20
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014f4:	2313      	movs	r3, #19
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4313      	orrs	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4ac1      	ldr	r2, [pc, #772]	; (8001820 <UART_SetConfig+0x350>)
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4abc      	ldr	r2, [pc, #752]	; (8001824 <UART_SetConfig+0x354>)
 8001532:	4013      	ands	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4ab4      	ldr	r2, [pc, #720]	; (8001828 <UART_SetConfig+0x358>)
 8001556:	4013      	ands	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4ab0      	ldr	r2, [pc, #704]	; (800182c <UART_SetConfig+0x35c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d125      	bne.n	80015ba <UART_SetConfig+0xea>
 800156e:	4bb0      	ldr	r3, [pc, #704]	; (8001830 <UART_SetConfig+0x360>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	2203      	movs	r2, #3
 8001574:	4013      	ands	r3, r2
 8001576:	2b01      	cmp	r3, #1
 8001578:	d00f      	beq.n	800159a <UART_SetConfig+0xca>
 800157a:	d304      	bcc.n	8001586 <UART_SetConfig+0xb6>
 800157c:	2b02      	cmp	r3, #2
 800157e:	d011      	beq.n	80015a4 <UART_SetConfig+0xd4>
 8001580:	2b03      	cmp	r3, #3
 8001582:	d005      	beq.n	8001590 <UART_SetConfig+0xc0>
 8001584:	e013      	b.n	80015ae <UART_SetConfig+0xde>
 8001586:	2317      	movs	r3, #23
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e064      	b.n	800165a <UART_SetConfig+0x18a>
 8001590:	2317      	movs	r3, #23
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2202      	movs	r2, #2
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e05f      	b.n	800165a <UART_SetConfig+0x18a>
 800159a:	2317      	movs	r3, #23
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	2204      	movs	r2, #4
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e05a      	b.n	800165a <UART_SetConfig+0x18a>
 80015a4:	2317      	movs	r3, #23
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	2208      	movs	r2, #8
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	e055      	b.n	800165a <UART_SetConfig+0x18a>
 80015ae:	2317      	movs	r3, #23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2210      	movs	r2, #16
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	e04f      	b.n	800165a <UART_SetConfig+0x18a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a9d      	ldr	r2, [pc, #628]	; (8001834 <UART_SetConfig+0x364>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d132      	bne.n	800162a <UART_SetConfig+0x15a>
 80015c4:	4b9a      	ldr	r3, [pc, #616]	; (8001830 <UART_SetConfig+0x360>)
 80015c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	0252      	lsls	r2, r2, #9
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <UART_SetConfig+0x13a>
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0252      	lsls	r2, r2, #9
 80015da:	4293      	cmp	r3, r2
 80015dc:	d802      	bhi.n	80015e4 <UART_SetConfig+0x114>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <UART_SetConfig+0x126>
 80015e2:	e01c      	b.n	800161e <UART_SetConfig+0x14e>
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	0292      	lsls	r2, r2, #10
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <UART_SetConfig+0x144>
 80015ec:	22c0      	movs	r2, #192	; 0xc0
 80015ee:	0292      	lsls	r2, r2, #10
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d005      	beq.n	8001600 <UART_SetConfig+0x130>
 80015f4:	e013      	b.n	800161e <UART_SetConfig+0x14e>
 80015f6:	2317      	movs	r3, #23
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e02c      	b.n	800165a <UART_SetConfig+0x18a>
 8001600:	2317      	movs	r3, #23
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	2202      	movs	r2, #2
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e027      	b.n	800165a <UART_SetConfig+0x18a>
 800160a:	2317      	movs	r3, #23
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	2204      	movs	r2, #4
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e022      	b.n	800165a <UART_SetConfig+0x18a>
 8001614:	2317      	movs	r3, #23
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	2208      	movs	r2, #8
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e01d      	b.n	800165a <UART_SetConfig+0x18a>
 800161e:	2317      	movs	r3, #23
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2210      	movs	r2, #16
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	e017      	b.n	800165a <UART_SetConfig+0x18a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a82      	ldr	r2, [pc, #520]	; (8001838 <UART_SetConfig+0x368>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d104      	bne.n	800163e <UART_SetConfig+0x16e>
 8001634:	2317      	movs	r3, #23
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e00d      	b.n	800165a <UART_SetConfig+0x18a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7e      	ldr	r2, [pc, #504]	; (800183c <UART_SetConfig+0x36c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d104      	bne.n	8001652 <UART_SetConfig+0x182>
 8001648:	2317      	movs	r3, #23
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e003      	b.n	800165a <UART_SetConfig+0x18a>
 8001652:	2317      	movs	r3, #23
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	2210      	movs	r2, #16
 8001658:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	429a      	cmp	r2, r3
 8001664:	d000      	beq.n	8001668 <UART_SetConfig+0x198>
 8001666:	e077      	b.n	8001758 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8001668:	2317      	movs	r3, #23
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d01c      	beq.n	80016ac <UART_SetConfig+0x1dc>
 8001672:	dc02      	bgt.n	800167a <UART_SetConfig+0x1aa>
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <UART_SetConfig+0x1b4>
 8001678:	e04f      	b.n	800171a <UART_SetConfig+0x24a>
 800167a:	2b04      	cmp	r3, #4
 800167c:	d027      	beq.n	80016ce <UART_SetConfig+0x1fe>
 800167e:	2b08      	cmp	r3, #8
 8001680:	d039      	beq.n	80016f6 <UART_SetConfig+0x226>
 8001682:	e04a      	b.n	800171a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001684:	f7ff fdb6 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 8001688:	0003      	movs	r3, r0
 800168a:	005a      	lsls	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	18d2      	adds	r2, r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	0019      	movs	r1, r3
 800169a:	0010      	movs	r0, r2
 800169c:	f7fe fd34 	bl	8000108 <__udivsi3>
 80016a0:	0003      	movs	r3, r0
 80016a2:	001a      	movs	r2, r3
 80016a4:	2314      	movs	r3, #20
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	801a      	strh	r2, [r3, #0]
        break;
 80016aa:	e03b      	b.n	8001724 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	4a63      	ldr	r2, [pc, #396]	; (8001840 <UART_SetConfig+0x370>)
 80016b4:	189a      	adds	r2, r3, r2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	0019      	movs	r1, r3
 80016bc:	0010      	movs	r0, r2
 80016be:	f7fe fd23 	bl	8000108 <__udivsi3>
 80016c2:	0003      	movs	r3, r0
 80016c4:	001a      	movs	r2, r3
 80016c6:	2314      	movs	r3, #20
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	801a      	strh	r2, [r3, #0]
        break;
 80016cc:	e02a      	b.n	8001724 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016ce:	f7ff fd09 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80016d2:	0003      	movs	r3, r0
 80016d4:	005a      	lsls	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	18d2      	adds	r2, r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	0019      	movs	r1, r3
 80016e4:	0010      	movs	r0, r2
 80016e6:	f7fe fd0f 	bl	8000108 <__udivsi3>
 80016ea:	0003      	movs	r3, r0
 80016ec:	001a      	movs	r2, r3
 80016ee:	2314      	movs	r3, #20
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	801a      	strh	r2, [r3, #0]
        break;
 80016f4:	e016      	b.n	8001724 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	0252      	lsls	r2, r2, #9
 8001700:	189a      	adds	r2, r3, r2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0019      	movs	r1, r3
 8001708:	0010      	movs	r0, r2
 800170a:	f7fe fcfd 	bl	8000108 <__udivsi3>
 800170e:	0003      	movs	r3, r0
 8001710:	001a      	movs	r2, r3
 8001712:	2314      	movs	r3, #20
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	801a      	strh	r2, [r3, #0]
        break;
 8001718:	e004      	b.n	8001724 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800171a:	2313      	movs	r3, #19
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
        break;
 8001722:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001724:	200a      	movs	r0, #10
 8001726:	183b      	adds	r3, r7, r0
 8001728:	2414      	movs	r4, #20
 800172a:	193a      	adds	r2, r7, r4
 800172c:	8812      	ldrh	r2, [r2, #0]
 800172e:	210f      	movs	r1, #15
 8001730:	438a      	bics	r2, r1
 8001732:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001734:	193b      	adds	r3, r7, r4
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	105b      	asrs	r3, r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	2207      	movs	r2, #7
 800173e:	4013      	ands	r3, r2
 8001740:	b299      	uxth	r1, r3
 8001742:	183b      	adds	r3, r7, r0
 8001744:	183a      	adds	r2, r7, r0
 8001746:	8812      	ldrh	r2, [r2, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	183a      	adds	r2, r7, r0
 8001752:	8812      	ldrh	r2, [r2, #0]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	e05b      	b.n	8001810 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8001758:	2317      	movs	r3, #23
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d01b      	beq.n	800179a <UART_SetConfig+0x2ca>
 8001762:	dc02      	bgt.n	800176a <UART_SetConfig+0x29a>
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <UART_SetConfig+0x2a4>
 8001768:	e04d      	b.n	8001806 <UART_SetConfig+0x336>
 800176a:	2b04      	cmp	r3, #4
 800176c:	d026      	beq.n	80017bc <UART_SetConfig+0x2ec>
 800176e:	2b08      	cmp	r3, #8
 8001770:	d037      	beq.n	80017e2 <UART_SetConfig+0x312>
 8001772:	e048      	b.n	8001806 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001774:	f7ff fd3e 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 8001778:	0002      	movs	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	18d2      	adds	r2, r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	0019      	movs	r1, r3
 8001788:	0010      	movs	r0, r2
 800178a:	f7fe fcbd 	bl	8000108 <__udivsi3>
 800178e:	0003      	movs	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60da      	str	r2, [r3, #12]
        break;
 8001798:	e03a      	b.n	8001810 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	4a28      	ldr	r2, [pc, #160]	; (8001844 <UART_SetConfig+0x374>)
 80017a2:	189a      	adds	r2, r3, r2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0019      	movs	r1, r3
 80017aa:	0010      	movs	r0, r2
 80017ac:	f7fe fcac 	bl	8000108 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60da      	str	r2, [r3, #12]
        break;
 80017ba:	e029      	b.n	8001810 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017bc:	f7ff fc92 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80017c0:	0002      	movs	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	18d2      	adds	r2, r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0019      	movs	r1, r3
 80017d0:	0010      	movs	r0, r2
 80017d2:	f7fe fc99 	bl	8000108 <__udivsi3>
 80017d6:	0003      	movs	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60da      	str	r2, [r3, #12]
        break;
 80017e0:	e016      	b.n	8001810 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	085b      	lsrs	r3, r3, #1
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0212      	lsls	r2, r2, #8
 80017ec:	189a      	adds	r2, r3, r2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0019      	movs	r1, r3
 80017f4:	0010      	movs	r0, r2
 80017f6:	f7fe fc87 	bl	8000108 <__udivsi3>
 80017fa:	0003      	movs	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60da      	str	r2, [r3, #12]
        break;
 8001804:	e004      	b.n	8001810 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001806:	2313      	movs	r3, #19
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
        break;
 800180e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001810:	2313      	movs	r3, #19
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]

}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b007      	add	sp, #28
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	efff69f3 	.word	0xefff69f3
 8001824:	ffffcfff 	.word	0xffffcfff
 8001828:	fffff4ff 	.word	0xfffff4ff
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000
 8001834:	40004400 	.word	0x40004400
 8001838:	40004800 	.word	0x40004800
 800183c:	40004c00 	.word	0x40004c00
 8001840:	00f42400 	.word	0x00f42400
 8001844:	007a1200 	.word	0x007a1200

08001848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d00b      	beq.n	8001872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a4a      	ldr	r2, [pc, #296]	; (800198c <UART_AdvFeatureConfig+0x144>)
 8001862:	4013      	ands	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d00b      	beq.n	8001894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a43      	ldr	r2, [pc, #268]	; (8001990 <UART_AdvFeatureConfig+0x148>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	2204      	movs	r2, #4
 800189a:	4013      	ands	r3, r2
 800189c:	d00b      	beq.n	80018b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <UART_AdvFeatureConfig+0x14c>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	2208      	movs	r2, #8
 80018bc:	4013      	ands	r3, r2
 80018be:	d00b      	beq.n	80018d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <UART_AdvFeatureConfig+0x150>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	2210      	movs	r2, #16
 80018de:	4013      	ands	r3, r2
 80018e0:	d00b      	beq.n	80018fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a2c      	ldr	r2, [pc, #176]	; (800199c <UART_AdvFeatureConfig+0x154>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	2220      	movs	r2, #32
 8001900:	4013      	ands	r3, r2
 8001902:	d00b      	beq.n	800191c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <UART_AdvFeatureConfig+0x158>)
 800190c:	4013      	ands	r3, r2
 800190e:	0019      	movs	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	4013      	ands	r3, r2
 8001924:	d01d      	beq.n	8001962 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <UART_AdvFeatureConfig+0x15c>)
 800192e:	4013      	ands	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	035b      	lsls	r3, r3, #13
 8001946:	429a      	cmp	r2, r3
 8001948:	d10b      	bne.n	8001962 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <UART_AdvFeatureConfig+0x160>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	4013      	ands	r3, r2
 800196a:	d00b      	beq.n	8001984 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <UART_AdvFeatureConfig+0x164>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
  }
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	fffdffff 	.word	0xfffdffff
 8001990:	fffeffff 	.word	0xfffeffff
 8001994:	fffbffff 	.word	0xfffbffff
 8001998:	ffff7fff 	.word	0xffff7fff
 800199c:	ffffefff 	.word	0xffffefff
 80019a0:	ffffdfff 	.word	0xffffdfff
 80019a4:	ffefffff 	.word	0xffefffff
 80019a8:	ff9fffff 	.word	0xff9fffff
 80019ac:	fff7ffff 	.word	0xfff7ffff

080019b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80019c2:	f7fe fc69 	bl	8000298 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <UART_CheckIdleState+0xa4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <UART_CheckIdleState+0x2e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <UART_CheckIdleState+0xa8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d129      	bne.n	8001a32 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2208      	movs	r2, #8
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d10d      	bne.n	8001a08 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	0399      	lsls	r1, r3, #14
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <UART_CheckIdleState+0xac>)
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	0013      	movs	r3, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	f000 f830 	bl	8001a60 <UART_WaitOnFlagUntilTimeout>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e021      	b.n	8001a4c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d10d      	bne.n	8001a32 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	03d9      	lsls	r1, r3, #15
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <UART_CheckIdleState+0xac>)
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	0013      	movs	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	f000 f81b 	bl	8001a60 <UART_WaitOnFlagUntilTimeout>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e00c      	b.n	8001a4c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2269      	movs	r2, #105	; 0x69
 8001a36:	2120      	movs	r1, #32
 8001a38:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	226a      	movs	r2, #106	; 0x6a
 8001a3e:	2120      	movs	r1, #32
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2268      	movs	r2, #104	; 0x68
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40004400 	.word	0x40004400
 8001a5c:	01ffffff 	.word	0x01ffffff

08001a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a70:	e02b      	b.n	8001aca <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	d028      	beq.n	8001aca <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8001a7e:	f7fe fc0b 	bl	8000298 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d21d      	bcs.n	8001aca <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4916      	ldr	r1, [pc, #88]	; (8001af4 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	438a      	bics	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2269      	movs	r2, #105	; 0x69
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	226a      	movs	r2, #106	; 0x6a
 8001aba:	2120      	movs	r1, #32
 8001abc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2268      	movs	r2, #104	; 0x68
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e00f      	b.n	8001aea <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	425a      	negs	r2, r3
 8001ada:	4153      	adcs	r3, r2
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	001a      	movs	r2, r3
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d0c4      	beq.n	8001a72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	fffffe5f 	.word	0xfffffe5f

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afc:	f7fe fb90 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b00:	f000 f80e 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b04:	f000 f8be 	bl	8001c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b08:	f000 f88c 	bl	8001c24 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001b0c:	f000 f85c 	bl	8001bc8 <MX_DAC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DAC->DHR12R1 = 4000;
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <main+0x24>)
 8001b12:	22fa      	movs	r2, #250	; 0xfa
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e7fa      	b.n	8001b10 <main+0x18>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40007400 	.word	0x40007400

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b099      	sub	sp, #100	; 0x64
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	242c      	movs	r4, #44	; 0x2c
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	2334      	movs	r3, #52	; 0x34
 8001b2e:	001a      	movs	r2, r3
 8001b30:	2100      	movs	r1, #0
 8001b32:	f000 faa1 	bl	8002078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b36:	231c      	movs	r3, #28
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	001a      	movs	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	f000 fa99 	bl	8002078 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b46:	003b      	movs	r3, r7
 8001b48:	0018      	movs	r0, r3
 8001b4a:	231c      	movs	r3, #28
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f000 fa92 	bl	8002078 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001b54:	193b      	adds	r3, r7, r4
 8001b56:	2220      	movs	r2, #32
 8001b58:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7fe fe51 	bl	8000810 <HAL_RCC_OscConfig>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001b72:	f000 f919 	bl	8001da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	211c      	movs	r1, #28
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2203      	movs	r2, #3
 8001b82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2101      	movs	r1, #1
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff f99b 	bl	8000ed0 <HAL_RCC_ClockConfig>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b9e:	f000 f903 	bl	8001da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba2:	003b      	movs	r3, r7
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba8:	003b      	movs	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bae:	003b      	movs	r3, r7
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fb35 	bl	8001220 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001bba:	f000 f8f5 	bl	8001da8 <Error_Handler>
  }
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b019      	add	sp, #100	; 0x64
 8001bc4:	bd90      	pop	{r4, r7, pc}
	...

08001bc8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bce:	003b      	movs	r3, r7
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	f000 fa4e 	bl	8002078 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_DAC_Init+0x54>)
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <MX_DAC_Init+0x58>)
 8001be0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_DAC_Init+0x54>)
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7fe fc15 	bl	8000414 <HAL_DAC_Init>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8001bee:	f000 f8db 	bl	8001da8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001bf2:	003b      	movs	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bf8:	003b      	movs	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bfe:	0039      	movs	r1, r7
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_DAC_Init+0x54>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7fe fc29 	bl	800045c <HAL_DAC_ConfigChannel>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8001c0e:	f000 f8cb 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	20000024 	.word	0x20000024
 8001c20:	40007400 	.word	0x40007400

08001c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <MX_USART2_UART_Init+0x5c>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c30:	2296      	movs	r2, #150	; 0x96
 8001c32:	0212      	lsls	r2, r2, #8
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff fbd9 	bl	8001420 <HAL_UART_Init>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c72:	f000 f899 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000009c 	.word	0x2000009c
 8001c80:	40004400 	.word	0x40004400

08001c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	2414      	movs	r4, #20
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2314      	movs	r3, #20
 8001c92:	001a      	movs	r2, r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	f000 f9ef 	bl	8002078 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0309      	lsls	r1, r1, #12
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	03c9      	lsls	r1, r1, #15
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	03db      	lsls	r3, r3, #15
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0289      	lsls	r1, r1, #10
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	029b      	lsls	r3, r3, #10
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	02c9      	lsls	r1, r1, #11
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <MX_GPIO_Init+0x118>)
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	02db      	lsls	r3, r3, #11
 8001d04:	4013      	ands	r3, r2
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d0a:	2390      	movs	r3, #144	; 0x90
 8001d0c:	05db      	lsls	r3, r3, #23
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2120      	movs	r1, #32
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7fe fd5e 	bl	80007d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d18:	2390      	movs	r3, #144	; 0x90
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2110      	movs	r1, #16
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7fe fd57 	bl	80007d4 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	0192      	lsls	r2, r2, #6
 8001d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <MX_GPIO_Init+0x11c>)
 8001d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3a:	193b      	adds	r3, r7, r4
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <MX_GPIO_Init+0x120>)
 8001d3e:	0019      	movs	r1, r3
 8001d40:	0010      	movs	r0, r2
 8001d42:	f7fe fbcb 	bl	80004dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d46:	193b      	adds	r3, r7, r4
 8001d48:	2220      	movs	r2, #32
 8001d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	193b      	adds	r3, r7, r4
 8001d4e:	2201      	movs	r2, #1
 8001d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	193a      	adds	r2, r7, r4
 8001d60:	2390      	movs	r3, #144	; 0x90
 8001d62:	05db      	lsls	r3, r3, #23
 8001d64:	0011      	movs	r1, r2
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7fe fbb8 	bl	80004dc <HAL_GPIO_Init>


  /*Configure GPIO pin : PA4 */
   GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d6c:	0021      	movs	r1, r4
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2210      	movs	r2, #16
 8001d72:	601a      	str	r2, [r3, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2203      	movs	r2, #3
 8001d78:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2203      	movs	r2, #3
 8001d84:	60da      	str	r2, [r3, #12]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	187a      	adds	r2, r7, r1
 8001d88:	2390      	movs	r3, #144	; 0x90
 8001d8a:	05db      	lsls	r3, r3, #23
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7fe fba4 	bl	80004dc <HAL_GPIO_Init>
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b00b      	add	sp, #44	; 0x2c
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	48000800 	.word	0x48000800

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x44>)
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	619a      	str	r2, [r3, #24]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	0549      	lsls	r1, r1, #21
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	61da      	str	r2, [r3, #28]
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_MspInit+0x44>)
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	055b      	lsls	r3, r3, #21
 8001de8:	4013      	ands	r3, r2
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	2314      	movs	r3, #20
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	0018      	movs	r0, r3
 8001e0a:	2314      	movs	r3, #20
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f000 f932 	bl	8002078 <memset>
  if(hdac->Instance==DAC)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_DAC_MspInit+0x84>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12c      	bne.n	8001e78 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_DAC_MspInit+0x88>)
 8001e20:	69da      	ldr	r2, [r3, #28]
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_DAC_MspInit+0x88>)
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	0589      	lsls	r1, r1, #22
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	61da      	str	r2, [r3, #28]
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_DAC_MspInit+0x88>)
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	059b      	lsls	r3, r3, #22
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_DAC_MspInit+0x88>)
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_DAC_MspInit+0x88>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0289      	lsls	r1, r1, #10
 8001e44:	430a      	orrs	r2, r1
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_DAC_MspInit+0x88>)
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e56:	2114      	movs	r1, #20
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2203      	movs	r2, #3
 8001e62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	187a      	adds	r2, r7, r1
 8001e6c:	2390      	movs	r3, #144	; 0x90
 8001e6e:	05db      	lsls	r3, r3, #23
 8001e70:	0011      	movs	r1, r2
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7fe fb32 	bl	80004dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b00a      	add	sp, #40	; 0x28
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40007400 	.word	0x40007400
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	2314      	movs	r3, #20
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	0018      	movs	r0, r3
 8001e96:	2314      	movs	r3, #20
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f000 f8ec 	bl	8002078 <memset>
  if(huart->Instance==USART2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d132      	bne.n	8001f10 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_UART_MspInit+0x94>)
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0x94>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	0289      	lsls	r1, r1, #10
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	61da      	str	r2, [r3, #28]
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_UART_MspInit+0x94>)
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_MspInit+0x94>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0x94>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0289      	lsls	r1, r1, #10
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_UART_MspInit+0x94>)
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	029b      	lsls	r3, r3, #10
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ee2:	2114      	movs	r1, #20
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2202      	movs	r2, #2
 8001eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2201      	movs	r2, #1
 8001f00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	187a      	adds	r2, r7, r1
 8001f04:	2390      	movs	r3, #144	; 0x90
 8001f06:	05db      	lsls	r3, r3, #23
 8001f08:	0011      	movs	r1, r2
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7fe fae6 	bl	80004dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b00a      	add	sp, #40	; 0x28
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40021000 	.word	0x40021000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f7fe f99a 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <SystemInit+0x70>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <SystemInit+0x70>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <SystemInit+0x70>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <SystemInit+0x70>)
 8001f6a:	4917      	ldr	r1, [pc, #92]	; (8001fc8 <SystemInit+0x74>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <SystemInit+0x70>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <SystemInit+0x70>)
 8001f76:	4915      	ldr	r1, [pc, #84]	; (8001fcc <SystemInit+0x78>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <SystemInit+0x70>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <SystemInit+0x70>)
 8001f82:	4913      	ldr	r1, [pc, #76]	; (8001fd0 <SystemInit+0x7c>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <SystemInit+0x70>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <SystemInit+0x70>)
 8001f8e:	4911      	ldr	r1, [pc, #68]	; (8001fd4 <SystemInit+0x80>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <SystemInit+0x70>)
 8001f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <SystemInit+0x70>)
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <SystemInit+0x70>)
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <SystemInit+0x70>)
 8001fa6:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <SystemInit+0x84>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SystemInit+0x70>)
 8001fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SystemInit+0x70>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <SystemInit+0x70>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]

}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08ffb80c 	.word	0x08ffb80c
 8001fcc:	fef6ffff 	.word	0xfef6ffff
 8001fd0:	fffbffff 	.word	0xfffbffff
 8001fd4:	ffc0ffff 	.word	0xffc0ffff
 8001fd8:	fffcfe2c 	.word	0xfffcfe2c

08001fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fdc:	480d      	ldr	r0, [pc, #52]	; (8002014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff8:	4c0b      	ldr	r4, [pc, #44]	; (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002006:	f7ff ffa5 	bl	8001f54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800200a:	f000 f811 	bl	8002030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800200e:	f7ff fd73 	bl	8001af8 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   r0, =_estack
 8002014:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002020:	080020e0 	.word	0x080020e0
  ldr r2, =_sbss
 8002024:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002028:	2000010c 	.word	0x2000010c

0800202c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_COMP_IRQHandler>
	...

08002030 <__libc_init_array>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	2600      	movs	r6, #0
 8002034:	4d0c      	ldr	r5, [pc, #48]	; (8002068 <__libc_init_array+0x38>)
 8002036:	4c0d      	ldr	r4, [pc, #52]	; (800206c <__libc_init_array+0x3c>)
 8002038:	1b64      	subs	r4, r4, r5
 800203a:	10a4      	asrs	r4, r4, #2
 800203c:	42a6      	cmp	r6, r4
 800203e:	d109      	bne.n	8002054 <__libc_init_array+0x24>
 8002040:	2600      	movs	r6, #0
 8002042:	f000 f821 	bl	8002088 <_init>
 8002046:	4d0a      	ldr	r5, [pc, #40]	; (8002070 <__libc_init_array+0x40>)
 8002048:	4c0a      	ldr	r4, [pc, #40]	; (8002074 <__libc_init_array+0x44>)
 800204a:	1b64      	subs	r4, r4, r5
 800204c:	10a4      	asrs	r4, r4, #2
 800204e:	42a6      	cmp	r6, r4
 8002050:	d105      	bne.n	800205e <__libc_init_array+0x2e>
 8002052:	bd70      	pop	{r4, r5, r6, pc}
 8002054:	00b3      	lsls	r3, r6, #2
 8002056:	58eb      	ldr	r3, [r5, r3]
 8002058:	4798      	blx	r3
 800205a:	3601      	adds	r6, #1
 800205c:	e7ee      	b.n	800203c <__libc_init_array+0xc>
 800205e:	00b3      	lsls	r3, r6, #2
 8002060:	58eb      	ldr	r3, [r5, r3]
 8002062:	4798      	blx	r3
 8002064:	3601      	adds	r6, #1
 8002066:	e7f2      	b.n	800204e <__libc_init_array+0x1e>
 8002068:	080020d8 	.word	0x080020d8
 800206c:	080020d8 	.word	0x080020d8
 8002070:	080020d8 	.word	0x080020d8
 8002074:	080020dc 	.word	0x080020dc

08002078 <memset>:
 8002078:	0003      	movs	r3, r0
 800207a:	1812      	adds	r2, r2, r0
 800207c:	4293      	cmp	r3, r2
 800207e:	d100      	bne.n	8002082 <memset+0xa>
 8002080:	4770      	bx	lr
 8002082:	7019      	strb	r1, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	e7f9      	b.n	800207c <memset+0x4>

08002088 <_init>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208e:	bc08      	pop	{r3}
 8002090:	469e      	mov	lr, r3
 8002092:	4770      	bx	lr

08002094 <_fini>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209a:	bc08      	pop	{r3}
 800209c:	469e      	mov	lr, r3
 800209e:	4770      	bx	lr
