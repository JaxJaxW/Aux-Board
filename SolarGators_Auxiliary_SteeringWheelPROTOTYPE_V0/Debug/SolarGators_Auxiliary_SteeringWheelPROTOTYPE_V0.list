
SolarGators_Auxiliary_SteeringWheelPROTOTYPE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800220c  0800220c  0001220c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800223c  0800223c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800223c  0800223c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800223c  0800223c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  08002258  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002258  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d41  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198b  00000000  00000000  00028d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002a708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016824  00000000  00000000  0002b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d5c  00000000  00000000  00042204  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a5e4  00000000  00000000  00049f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a8  00000000  00000000  000c45c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021f4 	.word	0x080021f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080021f4 	.word	0x080021f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Callback>:

//For external port interrupts

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]

    //      state = false;

    //  }

    if (GPIO_Pin == Cruise_in_Pin && state == true)
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2b10      	cmp	r3, #16
 8000232:	d106      	bne.n	8000242 <HAL_GPIO_EXTI_Callback+0x22>
 8000234:	4b31      	ldr	r3, [pc, #196]	; (80002fc <HAL_GPIO_EXTI_Callback+0xdc>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <HAL_GPIO_EXTI_Callback+0x22>
 800023e:	2301      	movs	r3, #1
 8000240:	e000      	b.n	8000244 <HAL_GPIO_EXTI_Callback+0x24>
 8000242:	2300      	movs	r3, #0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d007      	beq.n	8000258 <HAL_GPIO_EXTI_Callback+0x38>

    {

        HAL_TIM_Base_Start_IT(&htim3);
 8000248:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <HAL_GPIO_EXTI_Callback+0xe0>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fbde 	bl	8001a0c <HAL_TIM_Base_Start_IT>

        state = false;
 8000250:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <HAL_GPIO_EXTI_Callback+0xdc>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]

        __NOP();

    }

}
 8000256:	e04d      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0xd4>
    else if (GPIO_Pin == CPlus_in_Pin && state == true)
 8000258:	1dbb      	adds	r3, r7, #6
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	2b20      	cmp	r3, #32
 800025e:	d106      	bne.n	800026e <HAL_GPIO_EXTI_Callback+0x4e>
 8000260:	4b26      	ldr	r3, [pc, #152]	; (80002fc <HAL_GPIO_EXTI_Callback+0xdc>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <HAL_GPIO_EXTI_Callback+0x4e>
 800026a:	2301      	movs	r3, #1
 800026c:	e000      	b.n	8000270 <HAL_GPIO_EXTI_Callback+0x50>
 800026e:	2300      	movs	r3, #0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d007      	beq.n	8000284 <HAL_GPIO_EXTI_Callback+0x64>
        HAL_TIM_Base_Start_IT(&htim3);
 8000274:	4b22      	ldr	r3, [pc, #136]	; (8000300 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000276:	0018      	movs	r0, r3
 8000278:	f001 fbc8 	bl	8001a0c <HAL_TIM_Base_Start_IT>
        state = false;
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <HAL_GPIO_EXTI_Callback+0xdc>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
}
 8000282:	e037      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0xd4>
    else if (GPIO_Pin == LT_in_Pin)
 8000284:	1dbb      	adds	r3, r7, #6
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	2b08      	cmp	r3, #8
 800028a:	d107      	bne.n	800029c <HAL_GPIO_EXTI_Callback+0x7c>
    	HAL_GPIO_WritePin(GPIOC, LED_out_Pin, GPIO_PIN_SET);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	015b      	lsls	r3, r3, #5
 8000290:	481c      	ldr	r0, [pc, #112]	; (8000304 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000292:	2201      	movs	r2, #1
 8000294:	0019      	movs	r1, r3
 8000296:	f000 fe5a 	bl	8000f4e <HAL_GPIO_WritePin>
}
 800029a:	e02b      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0xd4>
    else if (GPIO_Pin == Hazards_in_Pin)
 800029c:	1dbb      	adds	r3, r7, #6
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	2b40      	cmp	r3, #64	; 0x40
 80002a2:	d107      	bne.n	80002b4 <HAL_GPIO_EXTI_Callback+0x94>
          HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_SET);
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2201      	movs	r2, #1
 80002aa:	2101      	movs	r1, #1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fe4e 	bl	8000f4e <HAL_GPIO_WritePin>
}
 80002b2:	e01f      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0xd4>
    else if (GPIO_Pin == Eco_in_Pin)
 80002b4:	1dbb      	adds	r3, r7, #6
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d107      	bne.n	80002cc <HAL_GPIO_EXTI_Callback+0xac>
          HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_SET);
 80002bc:	2390      	movs	r3, #144	; 0x90
 80002be:	05db      	lsls	r3, r3, #23
 80002c0:	2201      	movs	r2, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fe42 	bl	8000f4e <HAL_GPIO_WritePin>
}
 80002ca:	e013      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0xd4>
    else if (GPIO_Pin == Regen_in_Pin)
 80002cc:	1dbb      	adds	r3, r7, #6
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	2b80      	cmp	r3, #128	; 0x80
 80002d2:	d107      	bne.n	80002e4 <HAL_GPIO_EXTI_Callback+0xc4>
          HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_SET);
 80002d4:	2390      	movs	r3, #144	; 0x90
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	2201      	movs	r2, #1
 80002da:	2101      	movs	r1, #1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fe36 	bl	8000f4e <HAL_GPIO_WritePin>
}
 80002e2:	e007      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0xd4>
          HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_RESET);
 80002e4:	2390      	movs	r3, #144	; 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2200      	movs	r2, #0
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 fe2e 	bl	8000f4e <HAL_GPIO_WritePin>
        __NOP();
 80002f2:	46c0      	nop			; (mov r8, r8)
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b002      	add	sp, #8
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000000 	.word	0x20000000
 8000300:	2000006c 	.word	0x2000006c
 8000304:	48000800 	.word	0x48000800

08000308 <HAL_TIM_PeriodElapsedCallback>:

//For timer interrupt

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM2)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	429a      	cmp	r2, r3
 800031a:	d105      	bne.n	8000328 <HAL_TIM_PeriodElapsedCallback+0x20>

    {

        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800031e:	2101      	movs	r1, #1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fe31 	bl	8000f88 <HAL_GPIO_TogglePin>

        HAL_TIM_Base_Stop_IT(&htim3);

    }*/

}
 8000326:	e032      	b.n	800038e <HAL_TIM_PeriodElapsedCallback+0x86>
    else if (HAL_GPIO_ReadPin(Cruise_in_GPIO_Port, Cruise_in_Pin) == GPIO_PIN_RESET)
 8000328:	4b1c      	ldr	r3, [pc, #112]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800032a:	2110      	movs	r1, #16
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fdf1 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000332:	0003      	movs	r3, r0
 8000334:	425a      	negs	r2, r3
 8000336:	4153      	adcs	r3, r2
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d00e      	beq.n	800035c <HAL_TIM_PeriodElapsedCallback+0x54>
              HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_SET);
 800033e:	2390      	movs	r3, #144	; 0x90
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	0018      	movs	r0, r3
 8000348:	f000 fe01 	bl	8000f4e <HAL_GPIO_WritePin>
        state = true;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&htim3);
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fb7b 	bl	8001a50 <HAL_TIM_Base_Stop_IT>
}
 800035a:	e018      	b.n	800038e <HAL_TIM_PeriodElapsedCallback+0x86>
    else if (HAL_GPIO_ReadPin(CPlus_in_GPIO_Port, CPlus_in_Pin) == GPIO_PIN_RESET)
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800035e:	2120      	movs	r1, #32
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fdd7 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000366:	0003      	movs	r3, r0
 8000368:	425a      	negs	r2, r3
 800036a:	4153      	adcs	r3, r2
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00d      	beq.n	800038e <HAL_TIM_PeriodElapsedCallback+0x86>
            HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_SET);
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	2201      	movs	r2, #1
 8000378:	2101      	movs	r1, #1
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fde7 	bl	8000f4e <HAL_GPIO_WritePin>
        state = true;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&htim3);
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000388:	0018      	movs	r0, r3
 800038a:	f001 fb61 	bl	8001a50 <HAL_TIM_Base_Stop_IT>
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	48000800 	.word	0x48000800
 800039c:	48000400 	.word	0x48000400
 80003a0:	20000000 	.word	0x20000000
 80003a4:	2000006c 	.word	0x2000006c

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 faf8 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f80e 	bl	80003d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f912 	bl	80005dc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80003b8:	f000 f84e 	bl	8000458 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80003bc:	f000 f8ac 	bl	8000518 <_ZL12MX_TIM3_Initv>

  // PORT C, PIN 0 & PIN 1 INITIALIZATION

  // TIM2 & TIM3 INITIALIZATION

  HAL_TIM_Base_Start_IT(&htim2);
 80003c0:	4b02      	ldr	r3, [pc, #8]	; (80003cc <main+0x24>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fb22 	bl	8001a0c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80003c8:	e7fe      	b.n	80003c8 <main+0x20>
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	2000002c 	.word	0x2000002c

080003d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b093      	sub	sp, #76	; 0x4c
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2414      	movs	r4, #20
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2334      	movs	r3, #52	; 0x34
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f001 feff 	bl	80021e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	0018      	movs	r0, r3
 80003ea:	2310      	movs	r3, #16
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f001 fef8 	bl	80021e4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2220      	movs	r2, #32
 80003f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2201      	movs	r2, #1
 80003fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	193b      	adds	r3, r7, r4
 8000408:	0018      	movs	r0, r3
 800040a:	f000 fdf5 	bl	8000ff8 <HAL_RCC_OscConfig>
 800040e:	0003      	movs	r3, r0
 8000410:	1e5a      	subs	r2, r3, #1
 8000412:	4193      	sbcs	r3, r2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 800041a:	f000 f9ab 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2207      	movs	r2, #7
 8000422:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2203      	movs	r2, #3
 8000428:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2101      	movs	r1, #1
 800043a:	0018      	movs	r0, r3
 800043c:	f001 f962 	bl	8001704 <HAL_RCC_ClockConfig>
 8000440:	0003      	movs	r3, r0
 8000442:	1e5a      	subs	r2, r3, #1
 8000444:	4193      	sbcs	r3, r2
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 800044c:	f000 f992 	bl	8000774 <Error_Handler>
  }
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b013      	add	sp, #76	; 0x4c
 8000456:	bd90      	pop	{r4, r7, pc}

08000458 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	2308      	movs	r3, #8
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	0018      	movs	r0, r3
 8000464:	2310      	movs	r3, #16
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f001 febb 	bl	80021e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046e:	003b      	movs	r3, r7
 8000470:	0018      	movs	r0, r3
 8000472:	2308      	movs	r3, #8
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f001 feb4 	bl	80021e4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	05d2      	lsls	r2, r2, #23
 8000482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 8000486:	4a23      	ldr	r2, [pc, #140]	; (8000514 <_ZL12MX_TIM2_Initv+0xbc>)
 8000488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 8000492:	2263      	movs	r2, #99	; 0x63
 8000494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fa85 	bl	80019b4 <HAL_TIM_Base_Init>
 80004aa:	0003      	movs	r3, r0
 80004ac:	1e5a      	subs	r2, r3, #1
 80004ae:	4193      	sbcs	r3, r2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 80004b6:	f000 f95d 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ba:	2108      	movs	r1, #8
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0152      	lsls	r2, r2, #5
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fc00 	bl	8001cd0 <HAL_TIM_ConfigClockSource>
 80004d0:	0003      	movs	r3, r0
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	4193      	sbcs	r3, r2
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80004dc:	f000 f94a 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ec:	003a      	movs	r2, r7
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <_ZL12MX_TIM2_Initv+0xb8>)
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fde4 	bl	80020c0 <HAL_TIMEx_MasterConfigSynchronization>
 80004f8:	0003      	movs	r3, r0
 80004fa:	1e5a      	subs	r2, r3, #1
 80004fc:	4193      	sbcs	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000504:	f000 f936 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b006      	add	sp, #24
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000002c 	.word	0x2000002c
 8000514:	0000bb80 	.word	0x0000bb80

08000518 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	2308      	movs	r3, #8
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	2310      	movs	r3, #16
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f001 fe5b 	bl	80021e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052e:	003b      	movs	r3, r7
 8000530:	0018      	movs	r0, r3
 8000532:	2308      	movs	r3, #8
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f001 fe54 	bl	80021e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 800053e:	4a25      	ldr	r2, [pc, #148]	; (80005d4 <_ZL12MX_TIM3_Initv+0xbc>)
 8000540:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000544:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <_ZL12MX_TIM3_Initv+0xc0>)
 8000546:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800054e:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000550:	2209      	movs	r2, #9
 8000552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fa26 	bl	80019b4 <HAL_TIM_Base_Init>
 8000568:	0003      	movs	r3, r0
 800056a:	1e5a      	subs	r2, r3, #1
 800056c:	4193      	sbcs	r3, r2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000574:	f000 f8fe 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000578:	2108      	movs	r1, #8
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0152      	lsls	r2, r2, #5
 8000580:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000582:	187a      	adds	r2, r7, r1
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fba1 	bl	8001cd0 <HAL_TIM_ConfigClockSource>
 800058e:	0003      	movs	r3, r0
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	4193      	sbcs	r3, r2
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800059a:	f000 f8eb 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059e:	003b      	movs	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005aa:	003a      	movs	r2, r7
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <_ZL12MX_TIM3_Initv+0xb8>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd85 	bl	80020c0 <HAL_TIMEx_MasterConfigSynchronization>
 80005b6:	0003      	movs	r3, r0
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	4193      	sbcs	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80005c2:	f000 f8d7 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b006      	add	sp, #24
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	2000006c 	.word	0x2000006c
 80005d4:	40000400 	.word	0x40000400
 80005d8:	0000bb80 	.word	0x0000bb80

080005dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	240c      	movs	r4, #12
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2314      	movs	r3, #20
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f001 fdf9 	bl	80021e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b5c      	ldr	r3, [pc, #368]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b5b      	ldr	r3, [pc, #364]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0309      	lsls	r1, r1, #12
 80005fc:	430a      	orrs	r2, r1
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	4b58      	ldr	r3, [pc, #352]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	031b      	lsls	r3, r3, #12
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b55      	ldr	r3, [pc, #340]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b54      	ldr	r3, [pc, #336]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0289      	lsls	r1, r1, #10
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b51      	ldr	r3, [pc, #324]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b4e      	ldr	r3, [pc, #312]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b4d      	ldr	r3, [pc, #308]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	02c9      	lsls	r1, r1, #11
 8000634:	430a      	orrs	r2, r1
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <_ZL12MX_GPIO_Initv+0x188>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	02db      	lsls	r3, r3, #11
 8000640:	4013      	ands	r3, r2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_RESET);
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	2101      	movs	r1, #1
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fc7d 	bl	8000f4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dev_LED_GPIO_Port, Dev_LED_Pin, GPIO_PIN_SET);
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fc76 	bl	8000f4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_out_GPIO_Port, LED_out_Pin, GPIO_PIN_RESET);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	015b      	lsls	r3, r3, #5
 8000666:	4840      	ldr	r0, [pc, #256]	; (8000768 <_ZL12MX_GPIO_Initv+0x18c>)
 8000668:	2200      	movs	r2, #0
 800066a:	0019      	movs	r1, r3
 800066c:	f000 fc6f 	bl	8000f4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dev_Btn_Pin */
  GPIO_InitStruct.Pin = Dev_Btn_Pin;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0192      	lsls	r2, r2, #6
 8000676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	4a3c      	ldr	r2, [pc, #240]	; (800076c <_ZL12MX_GPIO_Initv+0x190>)
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dev_Btn_GPIO_Port, &GPIO_InitStruct);
 8000684:	193b      	adds	r3, r7, r4
 8000686:	4a38      	ldr	r2, [pc, #224]	; (8000768 <_ZL12MX_GPIO_Initv+0x18c>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 faca 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cruise_LED_Pin */
  GPIO_InitStruct.Pin = Cruise_LED_Pin;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2201      	movs	r2, #1
 800069a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2203      	movs	r2, #3
 80006a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Cruise_LED_GPIO_Port, &GPIO_InitStruct);
 80006a8:	193a      	adds	r2, r7, r4
 80006aa:	2390      	movs	r3, #144	; 0x90
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fab7 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Eco_in_Pin */
  GPIO_InitStruct.Pin = Eco_in_Pin;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	4a2b      	ldr	r2, [pc, #172]	; (800076c <_ZL12MX_GPIO_Initv+0x190>)
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Eco_in_GPIO_Port, &GPIO_InitStruct);
 80006c8:	193a      	adds	r2, r7, r4
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 faa7 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dev_LED_Pin */
  GPIO_InitStruct.Pin = Dev_LED_Pin;
 80006d6:	0021      	movs	r1, r4
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2220      	movs	r2, #32
 80006dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2201      	movs	r2, #1
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Dev_LED_GPIO_Port, &GPIO_InitStruct);
 80006f0:	000c      	movs	r4, r1
 80006f2:	187a      	adds	r2, r7, r1
 80006f4:	2390      	movs	r3, #144	; 0x90
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fa92 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_out_Pin */
  GPIO_InitStruct.Pin = LED_out_Pin;
 8000700:	0021      	movs	r1, r4
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0152      	lsls	r2, r2, #5
 8000708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_out_GPIO_Port, &GPIO_InitStruct);
 800071c:	000c      	movs	r4, r1
 800071e:	187b      	adds	r3, r7, r1
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <_ZL12MX_GPIO_Initv+0x18c>)
 8000722:	0019      	movs	r1, r3
 8000724:	0010      	movs	r0, r2
 8000726:	f000 fa7d 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LT_in_Pin Cruise_in_Pin CPlus_in_Pin Hazards_in_Pin 
                           Regen_in_Pin */
  GPIO_InitStruct.Pin = LT_in_Pin|Cruise_in_Pin|CPlus_in_Pin|Hazards_in_Pin 
 800072a:	0021      	movs	r1, r4
 800072c:	187b      	adds	r3, r7, r1
 800072e:	22f8      	movs	r2, #248	; 0xf8
 8000730:	601a      	str	r2, [r3, #0]
                          |Regen_in_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <_ZL12MX_GPIO_Initv+0x190>)
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	187b      	adds	r3, r7, r1
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <_ZL12MX_GPIO_Initv+0x194>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f000 fa6d 	bl	8000c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2007      	movs	r0, #7
 8000750:	f000 fa36 	bl	8000bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000754:	2007      	movs	r0, #7
 8000756:	f000 fa48 	bl	8000bea <HAL_NVIC_EnableIRQ>

}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b009      	add	sp, #36	; 0x24
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	48000800 	.word	0x48000800
 800076c:	10110000 	.word	0x10110000
 8000770:	48000400 	.word	0x48000400

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x44>)
 8000788:	699a      	ldr	r2, [r3, #24]
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_MspInit+0x44>)
 800078c:	2101      	movs	r1, #1
 800078e:	430a      	orrs	r2, r1
 8000790:	619a      	str	r2, [r3, #24]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x44>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	2201      	movs	r2, #1
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x44>)
 80007a0:	69da      	ldr	r2, [r3, #28]
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_MspInit+0x44>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0549      	lsls	r1, r1, #21
 80007a8:	430a      	orrs	r2, r1
 80007aa:	61da      	str	r2, [r3, #28]
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_MspInit+0x44>)
 80007ae:	69da      	ldr	r2, [r3, #28]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	055b      	lsls	r3, r3, #21
 80007b4:	4013      	ands	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	429a      	cmp	r2, r3
 80007da:	d114      	bne.n	8000806 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_TIM_Base_MspInit+0x78>)
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_TIM_Base_MspInit+0x78>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	61da      	str	r2, [r3, #28]
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_TIM_Base_MspInit+0x78>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	200f      	movs	r0, #15
 80007fa:	f000 f9e1 	bl	8000bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f9f3 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000804:	e018      	b.n	8000838 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_TIM_Base_MspInit+0x7c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d113      	bne.n	8000838 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_TIM_Base_MspInit+0x78>)
 8000812:	69da      	ldr	r2, [r3, #28]
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_TIM_Base_MspInit+0x78>)
 8000816:	2102      	movs	r1, #2
 8000818:	430a      	orrs	r2, r1
 800081a:	61da      	str	r2, [r3, #28]
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_TIM_Base_MspInit+0x78>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	2202      	movs	r2, #2
 8000822:	4013      	ands	r3, r2
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2010      	movs	r0, #16
 800082e:	f000 f9c7 	bl	8000bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000832:	2010      	movs	r0, #16
 8000834:	f000 f9d9 	bl	8000bea <HAL_NVIC_EnableIRQ>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b004      	add	sp, #16
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	40000400 	.word	0x40000400

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f8de 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fb9e 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000884:	2020      	movs	r0, #32
 8000886:	f000 fb9b 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800088a:	2040      	movs	r0, #64	; 0x40
 800088c:	f000 fb98 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000890:	2080      	movs	r0, #128	; 0x80
 8000892:	f000 fb95 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fb90 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <TIM2_IRQHandler+0x14>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 f8f8 	bl	8001aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	2000002c 	.word	0x2000002c

080008c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <TIM3_IRQHandler+0x14>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 f8ec 	bl	8001aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	2000006c 	.word	0x2000006c

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <_Z41__static_initialization_and_destruction_0ii>:
bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
    return operationSucceeded;
}
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d107      	bne.n	8000904 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d103      	bne.n	8000904 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f814 	bl	800092c <_ZN14RX_BINARY_TREEC1Ev>
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	0000ffff 	.word	0x0000ffff
 8000910:	200000ac 	.word	0x200000ac

08000914 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 800091a:	0019      	movs	r1, r3
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff ffe1 	bl	80008e4 <_Z41__static_initialization_and_destruction_0ii>
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	0000ffff 	.word	0x0000ffff

0800092c <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	869a      	strh	r2, [r3, #52]	; 0x34
{}
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000976:	f7ff ffaf 	bl	80008d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800097a:	f001 fc0f 	bl	800219c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fd13 	bl	80003a8 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000990:	08002248 	.word	0x08002248
  ldr r2, =_sbss
 8000994:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000998:	200000e8 	.word	0x200000e8

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <HAL_Init+0x24>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_Init+0x24>)
 80009aa:	2110      	movs	r1, #16
 80009ac:	430a      	orrs	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f809 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b6:	f7ff fee3 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_InitTick+0x5c>)
 80009d2:	681c      	ldr	r4, [r3, #0]
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_InitTick+0x60>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0019      	movs	r1, r3
 80009da:	23fa      	movs	r3, #250	; 0xfa
 80009dc:	0098      	lsls	r0, r3, #2
 80009de:	f7ff fb93 	bl	8000108 <__udivsi3>
 80009e2:	0003      	movs	r3, r0
 80009e4:	0019      	movs	r1, r3
 80009e6:	0020      	movs	r0, r4
 80009e8:	f7ff fb8e 	bl	8000108 <__udivsi3>
 80009ec:	0003      	movs	r3, r0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f90b 	bl	8000c0a <HAL_SYSTICK_Config>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e00f      	b.n	8000a1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d80b      	bhi.n	8000a1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	2301      	movs	r3, #1
 8000a06:	425b      	negs	r3, r3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f8d8 	bl	8000bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_InitTick+0x64>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b003      	add	sp, #12
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000004 	.word	0x20000004
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	20000008 	.word	0x20000008

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x1c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	001a      	movs	r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	18d2      	adds	r2, r2, r3
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_IncTick+0x20>)
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	2000000c 	.word	0x2000000c
 8000a50:	200000e4 	.word	0x200000e4

08000a54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <HAL_GetTick+0x10>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	200000e4 	.word	0x200000e4

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b7f      	cmp	r3, #127	; 0x7f
 8000a7a:	d809      	bhi.n	8000a90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	001a      	movs	r2, r3
 8000a82:	231f      	movs	r3, #31
 8000a84:	401a      	ands	r2, r3
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_EnableIRQ+0x30>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4091      	lsls	r1, r2
 8000a8c:	000a      	movs	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
  }
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab0:	d828      	bhi.n	8000b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	33c0      	adds	r3, #192	; 0xc0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	589b      	ldr	r3, [r3, r2]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	33c0      	adds	r3, #192	; 0xc0
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b02:	e031      	b.n	8000b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	400b      	ands	r3, r1
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3306      	adds	r3, #6
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1dfa      	adds	r2, r7, #7
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	2203      	movs	r2, #3
 8000b26:	400a      	ands	r2, r1
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	21ff      	movs	r1, #255	; 0xff
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	000a      	movs	r2, r1
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	001c      	movs	r4, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	4023      	ands	r3, r4
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	3306      	adds	r3, #6
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	18c3      	adds	r3, r0, r3
 8000b64:	3304      	adds	r3, #4
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <SysTick_Config+0x40>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d901      	bls.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e010      	b.n	8000bb0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <SysTick_Config+0x44>)
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	3a01      	subs	r2, #1
 8000b94:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	2301      	movs	r3, #1
 8000b98:	425b      	negs	r3, r3
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff7d 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SysTick_Config+0x44>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x44>)
 8000baa:	2207      	movs	r2, #7
 8000bac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	00ffffff 	.word	0x00ffffff
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	210f      	movs	r1, #15
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	1c02      	adds	r2, r0, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff33 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ffaf 	bl	8000b78 <SysTick_Config>
 8000c1a:	0003      	movs	r3, r0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	e155      	b.n	8000ee0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	000a      	movs	r2, r1
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d100      	bne.n	8000c4c <HAL_GPIO_Init+0x28>
 8000c4a:	e146      	b.n	8000eda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x38>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b12      	cmp	r3, #18
 8000c5a:	d123      	bne.n	8000ca4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	58d3      	ldr	r3, [r2, r3]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	4013      	ands	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2107      	movs	r1, #7
 8000c88:	400b      	ands	r3, r1
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	0013      	movs	r3, r2
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d00b      	beq.n	8000cf8 <HAL_GPIO_Init+0xd4>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d007      	beq.n	8000cf8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cec:	2b11      	cmp	r3, #17
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b12      	cmp	r3, #18
 8000cf6:	d130      	bne.n	8000d5a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	2201      	movs	r2, #1
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	055b      	lsls	r3, r3, #21
 8000d92:	4013      	ands	r3, r2
 8000d94:	d100      	bne.n	8000d98 <HAL_GPIO_Init+0x174>
 8000d96:	e0a0      	b.n	8000eda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <HAL_GPIO_Init+0x2d4>)
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <HAL_GPIO_Init+0x2d4>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	430a      	orrs	r2, r1
 8000da2:	619a      	str	r2, [r3, #24]
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_GPIO_Init+0x2d4>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4013      	ands	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db0:	4a52      	ldr	r2, [pc, #328]	; (8000efc <HAL_GPIO_Init+0x2d8>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	589b      	ldr	r3, [r3, r2]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	2390      	movs	r3, #144	; 0x90
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0x1ee>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_GPIO_Init+0x2dc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x1ea>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <HAL_GPIO_Init+0x2e0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x1e6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a45      	ldr	r2, [pc, #276]	; (8000f08 <HAL_GPIO_Init+0x2e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x1e2>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a44      	ldr	r2, [pc, #272]	; (8000f0c <HAL_GPIO_Init+0x2e8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x1de>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e008      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e004      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e12:	2300      	movs	r3, #0
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	2103      	movs	r1, #3
 8000e18:	400a      	ands	r2, r1
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e24:	4935      	ldr	r1, [pc, #212]	; (8000efc <HAL_GPIO_Init+0x2d8>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e32:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	025b      	lsls	r3, r3, #9
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	035b      	lsls	r3, r3, #13
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43da      	mvns	r2, r3
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	039b      	lsls	r3, r3, #14
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	40da      	lsrs	r2, r3
 8000ee8:	1e13      	subs	r3, r2, #0
 8000eea:	d000      	beq.n	8000eee <HAL_GPIO_Init+0x2ca>
 8000eec:	e6a2      	b.n	8000c34 <HAL_GPIO_Init+0x10>
  } 
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b006      	add	sp, #24
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	1cbb      	adds	r3, r7, #2
 8000f20:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	1cba      	adds	r2, r7, #2
 8000f28:	8812      	ldrh	r2, [r2, #0]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f2e:	230f      	movs	r3, #15
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e003      	b.n	8000f40 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	781b      	ldrb	r3, [r3, #0]
  }
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	0008      	movs	r0, r1
 8000f58:	0011      	movs	r1, r2
 8000f5a:	1cbb      	adds	r3, r7, #2
 8000f5c:	1c02      	adds	r2, r0, #0
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	1c7b      	adds	r3, r7, #1
 8000f62:	1c0a      	adds	r2, r1, #0
 8000f64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f66:	1c7b      	adds	r3, r7, #1
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6e:	1cbb      	adds	r3, r7, #2
 8000f70:	881a      	ldrh	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f76:	e003      	b.n	8000f80 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	881a      	ldrh	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	000a      	movs	r2, r1
 8000f92:	1cbb      	adds	r3, r7, #2
 8000f94:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	1cba      	adds	r2, r7, #2
 8000f9c:	8812      	ldrh	r2, [r2, #0]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d005      	beq.n	8000fae <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fa2:	1cbb      	adds	r3, r7, #2
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	041a      	lsls	r2, r3, #16
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fae:	1cbb      	adds	r3, r7, #2
 8000fb0:	881a      	ldrh	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	1dba      	adds	r2, r7, #6
 8000fd2:	8812      	ldrh	r2, [r2, #0]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d008      	beq.n	8000fea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fda:	1dba      	adds	r2, r7, #6
 8000fdc:	8812      	ldrh	r2, [r2, #0]
 8000fde:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f91b 	bl	8000220 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 fb76 	bl	80016f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	4013      	ands	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_RCC_OscConfig+0x20>
 8001016:	e08e      	b.n	8001136 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001018:	4bc5      	ldr	r3, [pc, #788]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	220c      	movs	r2, #12
 800101e:	4013      	ands	r3, r2
 8001020:	2b04      	cmp	r3, #4
 8001022:	d00e      	beq.n	8001042 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001024:	4bc2      	ldr	r3, [pc, #776]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	220c      	movs	r2, #12
 800102a:	4013      	ands	r3, r2
 800102c:	2b08      	cmp	r3, #8
 800102e:	d117      	bne.n	8001060 <HAL_RCC_OscConfig+0x68>
 8001030:	4bbf      	ldr	r3, [pc, #764]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	23c0      	movs	r3, #192	; 0xc0
 8001036:	025b      	lsls	r3, r3, #9
 8001038:	401a      	ands	r2, r3
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	025b      	lsls	r3, r3, #9
 800103e:	429a      	cmp	r2, r3
 8001040:	d10e      	bne.n	8001060 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001042:	4bbb      	ldr	r3, [pc, #748]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_RCC_OscConfig+0x58>
 800104e:	e071      	b.n	8001134 <HAL_RCC_OscConfig+0x13c>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d000      	beq.n	800105a <HAL_RCC_OscConfig+0x62>
 8001058:	e06c      	b.n	8001134 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	f000 fb4c 	bl	80016f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d107      	bne.n	8001078 <HAL_RCC_OscConfig+0x80>
 8001068:	4bb1      	ldr	r3, [pc, #708]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4bb0      	ldr	r3, [pc, #704]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0249      	lsls	r1, r1, #9
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e02f      	b.n	80010d8 <HAL_RCC_OscConfig+0xe0>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0xa2>
 8001080:	4bab      	ldr	r3, [pc, #684]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4baa      	ldr	r3, [pc, #680]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001086:	49ab      	ldr	r1, [pc, #684]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001088:	400a      	ands	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	4ba8      	ldr	r3, [pc, #672]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4ba7      	ldr	r3, [pc, #668]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001092:	49a9      	ldr	r1, [pc, #676]	; (8001338 <HAL_RCC_OscConfig+0x340>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e01e      	b.n	80010d8 <HAL_RCC_OscConfig+0xe0>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d10e      	bne.n	80010c0 <HAL_RCC_OscConfig+0xc8>
 80010a2:	4ba3      	ldr	r3, [pc, #652]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4ba2      	ldr	r3, [pc, #648]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	02c9      	lsls	r1, r1, #11
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	4b9f      	ldr	r3, [pc, #636]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b9e      	ldr	r3, [pc, #632]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0249      	lsls	r1, r1, #9
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0xe0>
 80010c0:	4b9b      	ldr	r3, [pc, #620]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b9a      	ldr	r3, [pc, #616]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010c6:	499b      	ldr	r1, [pc, #620]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	4b98      	ldr	r3, [pc, #608]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b97      	ldr	r3, [pc, #604]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010d2:	4999      	ldr	r1, [pc, #612]	; (8001338 <HAL_RCC_OscConfig+0x340>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d014      	beq.n	800110a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fcb8 	bl	8000a54 <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ea:	f7ff fcb3 	bl	8000a54 <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e2fd      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	4b8c      	ldr	r3, [pc, #560]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0xf2>
 8001108:	e015      	b.n	8001136 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fca3 	bl	8000a54 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fc9e 	bl	8000a54 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e2e8      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x11c>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_RCC_OscConfig+0x14a>
 8001140:	e06c      	b.n	800121c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001142:	4b7b      	ldr	r3, [pc, #492]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	220c      	movs	r2, #12
 8001148:	4013      	ands	r3, r2
 800114a:	d00e      	beq.n	800116a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800114c:	4b78      	ldr	r3, [pc, #480]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	220c      	movs	r2, #12
 8001152:	4013      	ands	r3, r2
 8001154:	2b08      	cmp	r3, #8
 8001156:	d11f      	bne.n	8001198 <HAL_RCC_OscConfig+0x1a0>
 8001158:	4b75      	ldr	r3, [pc, #468]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	23c0      	movs	r3, #192	; 0xc0
 800115e:	025b      	lsls	r3, r3, #9
 8001160:	401a      	ands	r2, r3
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	429a      	cmp	r2, r3
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b71      	ldr	r3, [pc, #452]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2202      	movs	r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x188>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d001      	beq.n	8001180 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e2bb      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	4393      	bics	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00da      	lsls	r2, r3, #3
 8001190:	4b67      	ldr	r3, [pc, #412]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e041      	b.n	800121c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d024      	beq.n	80011ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b63      	ldr	r3, [pc, #396]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b62      	ldr	r3, [pc, #392]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc52 	bl	8000a54 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc4d 	bl	8000a54 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e297      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2202      	movs	r2, #2
 80011ce:	4013      	ands	r3, r2
 80011d0:	d0f1      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b57      	ldr	r3, [pc, #348]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	22f8      	movs	r2, #248	; 0xf8
 80011d8:	4393      	bics	r3, r2
 80011da:	0019      	movs	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	00da      	lsls	r2, r3, #3
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e018      	b.n	800121c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	438a      	bics	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fc2d 	bl	8000a54 <HAL_GetTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fc28 	bl	8000a54 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e272      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d1f1      	bne.n	8001200 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2208      	movs	r2, #8
 8001222:	4013      	ands	r3, r2
 8001224:	d036      	beq.n	8001294 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d019      	beq.n	8001262 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122e:	4b40      	ldr	r3, [pc, #256]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fc0b 	bl	8000a54 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc06 	bl	8000a54 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e250      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d0f1      	beq.n	8001244 <HAL_RCC_OscConfig+0x24c>
 8001260:	e018      	b.n	8001294 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001268:	2101      	movs	r1, #1
 800126a:	438a      	bics	r2, r1
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbf1 	bl	8000a54 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fbec 	bl	8000a54 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e236      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d1f1      	bne.n	8001278 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2204      	movs	r2, #4
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2a8>
 800129e:	e0b5      	b.n	800140c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a0:	231f      	movs	r3, #31
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	d111      	bne.n	80012d8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	0549      	lsls	r1, r1, #21
 80012be:	430a      	orrs	r2, r1
 80012c0:	61da      	str	r2, [r3, #28]
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	055b      	lsls	r3, r3, #21
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012d0:	231f      	movs	r3, #31
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_RCC_OscConfig+0x344>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	d11a      	bne.n	800131a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_RCC_OscConfig+0x344>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_RCC_OscConfig+0x344>)
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0049      	lsls	r1, r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fbaf 	bl	8000a54 <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff fbaa 	bl	8000a54 <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1f4      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x344>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4013      	ands	r3, r2
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10e      	bne.n	8001340 <HAL_RCC_OscConfig+0x348>
 8001322:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001324:	6a1a      	ldr	r2, [r3, #32]
 8001326:	4b02      	ldr	r3, [pc, #8]	; (8001330 <HAL_RCC_OscConfig+0x338>)
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	e035      	b.n	800139c <HAL_RCC_OscConfig+0x3a4>
 8001330:	40021000 	.word	0x40021000
 8001334:	fffeffff 	.word	0xfffeffff
 8001338:	fffbffff 	.word	0xfffbffff
 800133c:	40007000 	.word	0x40007000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x36a>
 8001348:	4bca      	ldr	r3, [pc, #808]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4bc9      	ldr	r3, [pc, #804]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800134e:	2101      	movs	r1, #1
 8001350:	438a      	bics	r2, r1
 8001352:	621a      	str	r2, [r3, #32]
 8001354:	4bc7      	ldr	r3, [pc, #796]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001356:	6a1a      	ldr	r2, [r3, #32]
 8001358:	4bc6      	ldr	r3, [pc, #792]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800135a:	2104      	movs	r1, #4
 800135c:	438a      	bics	r2, r1
 800135e:	621a      	str	r2, [r3, #32]
 8001360:	e01c      	b.n	800139c <HAL_RCC_OscConfig+0x3a4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x38c>
 800136a:	4bc2      	ldr	r3, [pc, #776]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	4bc1      	ldr	r3, [pc, #772]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001370:	2104      	movs	r1, #4
 8001372:	430a      	orrs	r2, r1
 8001374:	621a      	str	r2, [r3, #32]
 8001376:	4bbf      	ldr	r3, [pc, #764]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	4bbe      	ldr	r3, [pc, #760]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800137c:	2101      	movs	r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	621a      	str	r2, [r3, #32]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0x3a4>
 8001384:	4bbb      	ldr	r3, [pc, #748]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	4bba      	ldr	r3, [pc, #744]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800138a:	2101      	movs	r1, #1
 800138c:	438a      	bics	r2, r1
 800138e:	621a      	str	r2, [r3, #32]
 8001390:	4bb8      	ldr	r3, [pc, #736]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	4bb7      	ldr	r3, [pc, #732]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001396:	2104      	movs	r1, #4
 8001398:	438a      	bics	r2, r1
 800139a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d014      	beq.n	80013ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fb56 	bl	8000a54 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff fb51 	bl	8000a54 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4aaf      	ldr	r2, [pc, #700]	; (8001678 <HAL_RCC_OscConfig+0x680>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e19a      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c2:	4bac      	ldr	r3, [pc, #688]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x3b6>
 80013cc:	e013      	b.n	80013f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fb41 	bl	8000a54 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	e009      	b.n	80013ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fb3c 	bl	8000a54 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	4aa5      	ldr	r2, [pc, #660]	; (8001678 <HAL_RCC_OscConfig+0x680>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e185      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	4ba1      	ldr	r3, [pc, #644]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013f6:	231f      	movs	r3, #31
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001400:	4b9c      	ldr	r3, [pc, #624]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001402:	69da      	ldr	r2, [r3, #28]
 8001404:	4b9b      	ldr	r3, [pc, #620]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001406:	499d      	ldr	r1, [pc, #628]	; (800167c <HAL_RCC_OscConfig+0x684>)
 8001408:	400a      	ands	r2, r1
 800140a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2210      	movs	r2, #16
 8001412:	4013      	ands	r3, r2
 8001414:	d063      	beq.n	80014de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d12a      	bne.n	8001474 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800141e:	4b95      	ldr	r3, [pc, #596]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001424:	2104      	movs	r1, #4
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800142a:	4b92      	ldr	r3, [pc, #584]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142e:	4b91      	ldr	r3, [pc, #580]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001430:	2101      	movs	r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fb0d 	bl	8000a54 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001440:	f7ff fb08 	bl	8000a54 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e152      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d0f1      	beq.n	8001440 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800145c:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800145e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001460:	22f8      	movs	r2, #248	; 0xf8
 8001462:	4393      	bics	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	00da      	lsls	r2, r3, #3
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800146e:	430a      	orrs	r2, r1
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
 8001472:	e034      	b.n	80014de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	3305      	adds	r3, #5
 800147a:	d111      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800147c:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800147e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001480:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001482:	2104      	movs	r1, #4
 8001484:	438a      	bics	r2, r1
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001488:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800148a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148c:	22f8      	movs	r2, #248	; 0xf8
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	00da      	lsls	r2, r3, #3
 8001498:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800149a:	430a      	orrs	r2, r1
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
 800149e:	e01e      	b.n	80014de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014a0:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	2104      	movs	r1, #4
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014ac:	4b71      	ldr	r3, [pc, #452]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b0:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff facc 	bl	8000a54 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014c2:	f7ff fac7 	bl	8000a54 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e111      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d4:	4b67      	ldr	r3, [pc, #412]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d1f1      	bne.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2220      	movs	r2, #32
 80014e4:	4013      	ands	r3, r2
 80014e6:	d05c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014e8:	4b62      	ldr	r3, [pc, #392]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	220c      	movs	r2, #12
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d00e      	beq.n	8001512 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014f4:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	220c      	movs	r2, #12
 80014fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d114      	bne.n	800152a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001500:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	23c0      	movs	r3, #192	; 0xc0
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	401a      	ands	r2, r3
 800150a:	23c0      	movs	r3, #192	; 0xc0
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	429a      	cmp	r2, r3
 8001510:	d10b      	bne.n	800152a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001512:	4b58      	ldr	r3, [pc, #352]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	025b      	lsls	r3, r3, #9
 800151a:	4013      	ands	r3, r2
 800151c:	d040      	beq.n	80015a0 <HAL_RCC_OscConfig+0x5a8>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d03c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0e6      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01b      	beq.n	800156a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001532:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001536:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0249      	lsls	r1, r1, #9
 800153c:	430a      	orrs	r2, r1
 800153e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fa88 	bl	8000a54 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800154a:	f7ff fa83 	bl	8000a54 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0cd      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800155e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	4013      	ands	r3, r2
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x552>
 8001568:	e01b      	b.n	80015a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800156a:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800156c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001570:	4943      	ldr	r1, [pc, #268]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001572:	400a      	ands	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fa6d 	bl	8000a54 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001580:	f7ff fa68 	bl	8000a54 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0b2      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x588>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d100      	bne.n	80015ac <HAL_RCC_OscConfig+0x5b4>
 80015aa:	e0a4      	b.n	80016f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	220c      	movs	r2, #12
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x5c2>
 80015b8:	e078      	b.n	80016ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d14c      	bne.n	800165c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	492e      	ldr	r1, [pc, #184]	; (8001684 <HAL_RCC_OscConfig+0x68c>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fa41 	bl	8000a54 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fa3c 	bl	8000a54 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e086      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	049b      	lsls	r3, r3, #18
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	220f      	movs	r2, #15
 80015fc:	4393      	bics	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_RCC_OscConfig+0x690>)
 8001610:	4013      	ands	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	431a      	orrs	r2, r3
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0449      	lsls	r1, r1, #17
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fa0f 	bl	8000a54 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fa0a 	bl	8000a54 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e054      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	049b      	lsls	r3, r3, #18
 8001656:	4013      	ands	r3, r2
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x644>
 800165a:	e04c      	b.n	80016f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_RCC_OscConfig+0x67c>)
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x68c>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff f9f4 	bl	8000a54 <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x6a6>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40021000 	.word	0x40021000
 8001678:	00001388 	.word	0x00001388
 800167c:	efffffff 	.word	0xefffffff
 8001680:	fffeffff 	.word	0xfffeffff
 8001684:	feffffff 	.word	0xfeffffff
 8001688:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff f9e2 	bl	8000a54 <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e02c      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_RCC_OscConfig+0x708>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	049b      	lsls	r3, r3, #18
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x694>
 80016aa:	e024      	b.n	80016f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e01f      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x708>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x708>)
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	23c0      	movs	r3, #192	; 0xc0
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	220f      	movs	r2, #15
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	23f0      	movs	r3, #240	; 0xf0
 80016e6:	039b      	lsls	r3, r3, #14
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b008      	add	sp, #32
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0bf      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001718:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d911      	bls.n	800174a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0a6      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d015      	beq.n	8001780 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2204      	movs	r2, #4
 800175a:	4013      	ands	r3, r2
 800175c:	d006      	beq.n	800176c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800175e:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001764:	21e0      	movs	r1, #224	; 0xe0
 8001766:	00c9      	lsls	r1, r1, #3
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	22f0      	movs	r2, #240	; 0xf0
 8001772:	4393      	bics	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d04c      	beq.n	8001824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	029b      	lsls	r3, r3, #10
 800179a:	4013      	ands	r3, r2
 800179c:	d120      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07a      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d114      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06e      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 80017c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	4013      	ands	r3, r2
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e062      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e05b      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	4393      	bics	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f4:	f7ff f92e 	bl	8000a54 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fc:	e009      	b.n	8001812 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7ff f929 	bl	8000a54 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x1a4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e042      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	220c      	movs	r2, #12
 8001818:	401a      	ands	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	429a      	cmp	r2, r3
 8001822:	d1ec      	bne.n	80017fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d211      	bcs.n	8001856 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	4393      	bics	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x19c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e020      	b.n	8001898 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d009      	beq.n	8001874 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_RCC_ClockConfig+0x1a8>)
 8001866:	4013      	ands	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001874:	f000 f820 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001878:	0001      	movs	r1, r0
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1a0>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	220f      	movs	r2, #15
 8001882:	4013      	ands	r3, r2
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1ac>)
 8001886:	5cd3      	ldrb	r3, [r2, r3]
 8001888:	000a      	movs	r2, r1
 800188a:	40da      	lsrs	r2, r3
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1b0>)
 800188e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff f899 	bl	80009c8 <HAL_InitTick>
  
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	00001388 	.word	0x00001388
 80018ac:	fffff8ff 	.word	0xfffff8ff
 80018b0:	0800222c 	.word	0x0800222c
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b08f      	sub	sp, #60	; 0x3c
 80018bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018be:	2314      	movs	r3, #20
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	4a37      	ldr	r2, [pc, #220]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80018c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018c6:	c313      	stmia	r3!, {r0, r1, r4}
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4a35      	ldr	r2, [pc, #212]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80018d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018d2:	c313      	stmia	r3!, {r0, r1, r4}
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	220c      	movs	r2, #12
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d006      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x52>
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d043      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xd0>
 8001900:	2b04      	cmp	r3, #4
 8001902:	d144      	bne.n	800198e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001908:	e044      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	220f      	movs	r2, #15
 8001910:	4013      	ands	r3, r2
 8001912:	2214      	movs	r2, #20
 8001914:	18ba      	adds	r2, r7, r2
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	220f      	movs	r2, #15
 8001920:	4013      	ands	r3, r2
 8001922:	1d3a      	adds	r2, r7, #4
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	025b      	lsls	r3, r3, #9
 800192e:	401a      	ands	r2, r3
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	429a      	cmp	r2, r3
 8001936:	d109      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193a:	481c      	ldr	r0, [pc, #112]	; (80019ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800193c:	f7fe fbe4 	bl	8000108 <__udivsi3>
 8001940:	0003      	movs	r3, r0
 8001942:	001a      	movs	r2, r3
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	4353      	muls	r3, r2
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
 800194a:	e01a      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	23c0      	movs	r3, #192	; 0xc0
 8001950:	025b      	lsls	r3, r3, #9
 8001952:	401a      	ands	r2, r3
 8001954:	23c0      	movs	r3, #192	; 0xc0
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	429a      	cmp	r2, r3
 800195a:	d109      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800195c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800195e:	4814      	ldr	r0, [pc, #80]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001960:	f7fe fbd2 	bl	8000108 <__udivsi3>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	4353      	muls	r3, r2
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
 800196e:	e008      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001974:	f7fe fbc8 	bl	8000108 <__udivsi3>
 8001978:	0003      	movs	r3, r0
 800197a:	001a      	movs	r2, r3
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	4353      	muls	r3, r2
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001986:	e005      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800198c:	e002      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001992:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b00f      	add	sp, #60	; 0x3c
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	0800220c 	.word	0x0800220c
 80019a4:	0800221c 	.word	0x0800221c
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	02dc6c00 	.word	0x02dc6c00

080019b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e01e      	b.n	8001a04 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	223d      	movs	r2, #61	; 0x3d
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	223c      	movs	r2, #60	; 0x3c
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7fe fef3 	bl	80007c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	223d      	movs	r2, #61	; 0x3d
 80019e6:	2102      	movs	r1, #2
 80019e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f000 fa49 	bl	8001e8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223d      	movs	r2, #61	; 0x3d
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	430a      	orrs	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d007      	beq.n	8001a46 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	438a      	bics	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_TIM_Base_Stop_IT+0x4c>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	d10d      	bne.n	8001a90 <HAL_TIM_Base_Stop_IT+0x40>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_TIM_Base_Stop_IT+0x50>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d107      	bne.n	8001a90 <HAL_TIM_Base_Stop_IT+0x40>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	00001111 	.word	0x00001111
 8001aa0:	00000444 	.word	0x00000444

08001aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d124      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d11d      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2203      	movs	r2, #3
 8001ace:	4252      	negs	r2, r2
 8001ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f9b8 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001aec:	e007      	b.n	8001afe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f9ab 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 f9b7 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d125      	bne.n	8001b5e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d11e      	bne.n	8001b5e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2205      	movs	r2, #5
 8001b26:	4252      	negs	r2, r2
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 f98b 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001b46:	e007      	b.n	8001b58 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f97e 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f98a 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2208      	movs	r2, #8
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d124      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2208      	movs	r2, #8
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d11d      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2209      	movs	r2, #9
 8001b80:	4252      	negs	r2, r2
 8001b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2204      	movs	r2, #4
 8001b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2203      	movs	r2, #3
 8001b92:	4013      	ands	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 f95f 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001b9e:	e007      	b.n	8001bb0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f952 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f95e 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d125      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d11e      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2211      	movs	r2, #17
 8001bd8:	4252      	negs	r2, r2
 8001bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2208      	movs	r2, #8
 8001be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	23c0      	movs	r3, #192	; 0xc0
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f932 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e007      	b.n	8001c0a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 f925 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f931 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10f      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d108      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4252      	negs	r2, r2
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7fe fb65 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b80      	cmp	r3, #128	; 0x80
 8001c4a:	d10f      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b80      	cmp	r3, #128	; 0x80
 8001c58:	d108      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2281      	movs	r2, #129	; 0x81
 8001c60:	4252      	negs	r2, r2
 8001c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 fa90 	bl	800218c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d10f      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d108      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2241      	movs	r2, #65	; 0x41
 8001c8e:	4252      	negs	r2, r2
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f8f1 	bl	8001e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d108      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2221      	movs	r2, #33	; 0x21
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 fa5a 	bl	800217c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	223c      	movs	r2, #60	; 0x3c
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_TIM_ConfigClockSource+0x18>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0ab      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x170>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	223c      	movs	r2, #60	; 0x3c
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	223d      	movs	r2, #61	; 0x3d
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2277      	movs	r2, #119	; 0x77
 8001d04:	4393      	bics	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a4f      	ldr	r2, [pc, #316]	; (8001e48 <HAL_TIM_ConfigClockSource+0x178>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d100      	bne.n	8001d22 <HAL_TIM_ConfigClockSource+0x52>
 8001d20:	e06b      	b.n	8001dfa <HAL_TIM_ConfigClockSource+0x12a>
 8001d22:	d80e      	bhi.n	8001d42 <HAL_TIM_ConfigClockSource+0x72>
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d100      	bne.n	8001d2a <HAL_TIM_ConfigClockSource+0x5a>
 8001d28:	e077      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x14a>
 8001d2a:	d803      	bhi.n	8001d34 <HAL_TIM_ConfigClockSource+0x64>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <HAL_TIM_ConfigClockSource+0x62>
 8001d30:	e073      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d32:	e07c      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d100      	bne.n	8001d3a <HAL_TIM_ConfigClockSource+0x6a>
 8001d38:	e06f      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x14a>
 8001d3a:	2b30      	cmp	r3, #48	; 0x30
 8001d3c:	d100      	bne.n	8001d40 <HAL_TIM_ConfigClockSource+0x70>
 8001d3e:	e06c      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001d40:	e075      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d42:	2b70      	cmp	r3, #112	; 0x70
 8001d44:	d00e      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x94>
 8001d46:	d804      	bhi.n	8001d52 <HAL_TIM_ConfigClockSource+0x82>
 8001d48:	2b50      	cmp	r3, #80	; 0x50
 8001d4a:	d036      	beq.n	8001dba <HAL_TIM_ConfigClockSource+0xea>
 8001d4c:	2b60      	cmp	r3, #96	; 0x60
 8001d4e:	d044      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001d50:	e06d      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	0152      	lsls	r2, r2, #5
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d068      	beq.n	8001e2c <HAL_TIM_ConfigClockSource+0x15c>
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	0192      	lsls	r2, r2, #6
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d017      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001d62:	e064      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f000 f984 	bl	8002080 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2277      	movs	r2, #119	; 0x77
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]
      break;
 8001d90:	e04d      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f000 f96d 	bl	8002080 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	01c9      	lsls	r1, r1, #7
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]
      break;
 8001db8:	e039      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6859      	ldr	r1, [r3, #4]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	f000 f8e0 	bl	8001f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2150      	movs	r1, #80	; 0x50
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f93a 	bl	800204c <TIM_ITRx_SetConfig>
      break;
 8001dd8:	e029      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	001a      	movs	r2, r3
 8001de8:	f000 f8fe 	bl	8001fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2160      	movs	r1, #96	; 0x60
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 f92a 	bl	800204c <TIM_ITRx_SetConfig>
      break;
 8001df8:	e019      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	001a      	movs	r2, r3
 8001e08:	f000 f8c0 	bl	8001f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2140      	movs	r1, #64	; 0x40
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f91a 	bl	800204c <TIM_ITRx_SetConfig>
      break;
 8001e18:	e009      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0019      	movs	r1, r3
 8001e24:	0010      	movs	r0, r2
 8001e26:	f000 f911 	bl	800204c <TIM_ITRx_SetConfig>
      break;
 8001e2a:	e000      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001e2c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	223d      	movs	r2, #61	; 0x3d
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	223c      	movs	r2, #60	; 0x3c
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	ffff00ff 	.word	0xffff00ff

08001e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a34      	ldr	r2, [pc, #208]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d008      	beq.n	8001eb6 <TIM_Base_SetConfig+0x2a>
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d003      	beq.n	8001eb6 <TIM_Base_SetConfig+0x2a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <TIM_Base_SetConfig+0xe8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2270      	movs	r2, #112	; 0x70
 8001eba:	4393      	bics	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d018      	beq.n	8001f02 <TIM_Base_SetConfig+0x76>
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d013      	beq.n	8001f02 <TIM_Base_SetConfig+0x76>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <TIM_Base_SetConfig+0xe8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00f      	beq.n	8001f02 <TIM_Base_SetConfig+0x76>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <TIM_Base_SetConfig+0xec>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <TIM_Base_SetConfig+0x76>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <TIM_Base_SetConfig+0xf0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <TIM_Base_SetConfig+0x76>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <TIM_Base_SetConfig+0xf4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <TIM_Base_SetConfig+0x76>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <TIM_Base_SetConfig+0xf8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d108      	bne.n	8001f14 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <TIM_Base_SetConfig+0xfc>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4393      	bics	r3, r2
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0xce>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <TIM_Base_SetConfig+0xf0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0xce>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <TIM_Base_SetConfig+0xf4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0xce>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <TIM_Base_SetConfig+0xf8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d103      	bne.n	8001f62 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	615a      	str	r2, [r3, #20]
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40002000 	.word	0x40002000
 8001f7c:	40014000 	.word	0x40014000
 8001f80:	40014400 	.word	0x40014400
 8001f84:	40014800 	.word	0x40014800
 8001f88:	fffffcff 	.word	0xfffffcff

08001f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	22f0      	movs	r2, #240	; 0xf0
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	220a      	movs	r2, #10
 8001fc8:	4393      	bics	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	621a      	str	r2, [r3, #32]
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b006      	add	sp, #24
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <TIM_TI2_ConfigInputStage+0x60>)
 8002012:	4013      	ands	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	031b      	lsls	r3, r3, #12
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	22a0      	movs	r2, #160	; 0xa0
 8002024:	4393      	bics	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	621a      	str	r2, [r3, #32]
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b006      	add	sp, #24
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	ffff0fff 	.word	0xffff0fff

0800204c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2270      	movs	r2, #112	; 0x70
 8002060:	4393      	bics	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	2207      	movs	r2, #7
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	609a      	str	r2, [r3, #8]
}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <TIM_ETR_SetConfig+0x3c>)
 8002098:	4013      	ands	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b006      	add	sp, #24
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	ffff00ff 	.word	0xffff00ff

080020c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	223c      	movs	r2, #60	; 0x3c
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e047      	b.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	223c      	movs	r2, #60	; 0x3c
 80020dc:	2101      	movs	r1, #1
 80020de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	223d      	movs	r2, #61	; 0x3d
 80020e4:	2102      	movs	r1, #2
 80020e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2270      	movs	r2, #112	; 0x70
 80020fc:	4393      	bics	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00f      	beq.n	800213c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	05db      	lsls	r3, r3, #23
 8002124:	429a      	cmp	r2, r3
 8002126:	d009      	beq.n	800213c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d10c      	bne.n	8002156 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	4393      	bics	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	4313      	orrs	r3, r2
 800214c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	223d      	movs	r2, #61	; 0x3d
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223c      	movs	r2, #60	; 0x3c
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40012c00 	.word	0x40012c00
 8002174:	40000400 	.word	0x40000400
 8002178:	40014000 	.word	0x40014000

0800217c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <__libc_init_array>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2600      	movs	r6, #0
 80021a0:	4d0c      	ldr	r5, [pc, #48]	; (80021d4 <__libc_init_array+0x38>)
 80021a2:	4c0d      	ldr	r4, [pc, #52]	; (80021d8 <__libc_init_array+0x3c>)
 80021a4:	1b64      	subs	r4, r4, r5
 80021a6:	10a4      	asrs	r4, r4, #2
 80021a8:	42a6      	cmp	r6, r4
 80021aa:	d109      	bne.n	80021c0 <__libc_init_array+0x24>
 80021ac:	2600      	movs	r6, #0
 80021ae:	f000 f821 	bl	80021f4 <_init>
 80021b2:	4d0a      	ldr	r5, [pc, #40]	; (80021dc <__libc_init_array+0x40>)
 80021b4:	4c0a      	ldr	r4, [pc, #40]	; (80021e0 <__libc_init_array+0x44>)
 80021b6:	1b64      	subs	r4, r4, r5
 80021b8:	10a4      	asrs	r4, r4, #2
 80021ba:	42a6      	cmp	r6, r4
 80021bc:	d105      	bne.n	80021ca <__libc_init_array+0x2e>
 80021be:	bd70      	pop	{r4, r5, r6, pc}
 80021c0:	00b3      	lsls	r3, r6, #2
 80021c2:	58eb      	ldr	r3, [r5, r3]
 80021c4:	4798      	blx	r3
 80021c6:	3601      	adds	r6, #1
 80021c8:	e7ee      	b.n	80021a8 <__libc_init_array+0xc>
 80021ca:	00b3      	lsls	r3, r6, #2
 80021cc:	58eb      	ldr	r3, [r5, r3]
 80021ce:	4798      	blx	r3
 80021d0:	3601      	adds	r6, #1
 80021d2:	e7f2      	b.n	80021ba <__libc_init_array+0x1e>
 80021d4:	0800223c 	.word	0x0800223c
 80021d8:	0800223c 	.word	0x0800223c
 80021dc:	0800223c 	.word	0x0800223c
 80021e0:	08002244 	.word	0x08002244

080021e4 <memset>:
 80021e4:	0003      	movs	r3, r0
 80021e6:	1812      	adds	r2, r2, r0
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d100      	bne.n	80021ee <memset+0xa>
 80021ec:	4770      	bx	lr
 80021ee:	7019      	strb	r1, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	e7f9      	b.n	80021e8 <memset+0x4>

080021f4 <_init>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr

08002200 <_fini>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002206:	bc08      	pop	{r3}
 8002208:	469e      	mov	lr, r3
 800220a:	4770      	bx	lr
